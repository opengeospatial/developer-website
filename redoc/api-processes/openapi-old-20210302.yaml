openapi: 3.0.2
info:
  version: 1.0-draft.6-SNAPSHOT
  title: "Building Blocks specified in OGC API - Processes - Part 1: Core"
  termsOfService: 'http://www.opengeospatial.org/legal/'
  contact:
    name: "Open Geospatial Consortium (OGC)"
    email: standards-team@ogc.org
    url: 'https://www.ogc.org/contacts'
  license:
    name: OGC software license 1.0
    url: 'http://www.ogc.org/ogc/software/1.0'
  x-logo:
    url: 'https://www.ogc.org/pub/www/files/OGC_Logo_2D_Blue_x_0_0.png'
  description: >
    This document is not an OGC Standard. This document is distributed for review and comment. This document is subject to change without notice and may not be referred to as an OGC Standard.

    Recipients of this document are invited to submit, with their comments, notification of any relevant patent rights of which they are aware and to provide supporting documentation.

    # Introduction

    In many cases geospatial or location data, including data from sensors, must be processed before the information can be used effectively.
    The OGC Web Processing Service (WPS) Interface Standard provided a standard interface that simplifies the task of making simple or complex
    computational processing services accessible via web services. Such services include well-known processes found in GIS software as well as
    specialized processes for spatio-temporal modeling and simulation. While the OGC WPS standard was designed with spatial processing in mind,
    it could also be used to readily insert non-spatial processing tasks into a web services environment. The WPS standard provided a robust,
    interoperable, and versatile protocol for process execution on web services. It supports both immediate processing for computational tasks
    that take little time and asynchronous processing for more complex and time-consuming tasks. Moreover, the WPS standard defines a general
    process model that is designed to provide an interoperable description of processing functions. It is intended to support process cataloguing
    and discovery in a distributed environment.

    The OGC API - Processes builds on the WPS 2.0 standard and defines the processing standards to communicate over a RESTful protocol using JSON
    encodings. This API uses [OpenAPI](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md) to describe the interface.
tags:
- name: Capabilities
  description: Essential characteristics of this API including information about the data.
- name: Processes
  description: Access to processes.
paths:
  /:
    get:
      tags:
      - Capabilities
      summary: landing page of this API
      description: The landing page provides links to the API definition, the Conformance statements and the metadata about the processes offered by this service.
      operationId: getLandingPage
      responses:
        "200":
          description: links to the API capabilities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/landingPage'
            text/html:
              schema:
                type: string
  /conformance:
    get:
      tags:
      - Conformance
      summary: information about standards that this API conforms to
      description: 'list all requirements classes specified in a standard (e.g., WPS REST/JSON Binding Part 1: Core) that the server conforms to'
      operationId: getRequirementsClasses
      responses:
        "200":
          description: the URIs of all requirements classes supported by the server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/confClasses'
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
  /processes:
    get:
      tags:
      - Processes
      summary: retrieve available processes
      description: TODO
      operationId: getProcesses
      responses:
        "200":
          description: Information about the available processes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/processList'
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
  /processes/{id}:
    get:
      tags:
      - ProcessDescription
      summary: retrieve a process description
      operationId: getProcessDescription
      parameters:
      - name: id
        in: path
        description: The id of a process
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: buffer
      responses:
        "200":
          description: A process description.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/process'
              example:
                id: buffer
                title: Buffer process
                description: Buffer process
                keywords:
                - process
                - buffer
                inputs:
                - id: features
                  title: features
                  description: The features to buffer
                  formats:
                  - mimeType: application/json
                    maximumMegabytes: 3
                    default: true
                  - mimeType: application/x-zipped-shp
                    maximumMegabytes: 4
                - id: width
                  title: width
                  description: The width of the buffer
                  literalDataDomain:
                    dataType:
                      name: double
                    valueDefinition:
                      defaultValue: 1000
                    uom: meters
                outputs:
                - id: result
                  title: result
                  description: The buffered features
                  formats:
                  - mimeType: application/json
                    default: true
                  - mimeType: application/x-zipped-shp
                version: 1.1
                jobControlOptions:
                - sync-execute
                - async-execute
                outputTransmission:
                - value
                - reference
                links:
                - rel: canonical
                  href: https://virtserver.swaggerhub.com/geoprocessing/WPS/0./processes/buffer/jobs
                  type: application/json
                  title: Execute endpoint
        "404":
          description: The process with id {id} does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
  /processes/{id}/jobs:
    get:
      tags:
      - JobList
      summary: retrieve the list of jobs for a process.
      operationId: getJobList
      parameters:
      - name: id
        in: path
        description: The id of a process.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: A list of jobs for this process.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobList'
        "404":
          description: The process with id {id} does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
    post:
      tags:
      - Execute
      summary: execute a process.
      operationId: execute
      parameters:
      - name: id
        in: path
        description: The id of a process.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Mandatory execute request JSON
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/execute'
        required: true
      responses:
        "200":
          description: Result of a synchronous execution.
          content:
            /*:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "201":
          description: Started execution. Created job.
          headers:
            Location:
              description: URL to check the status of the execution/job.
              style: simple
              explode: false
              schema:
                type: string
        "404":
          description: The process with id {id} does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
  /processes/{id}/jobs/{jobID}:
    get:
      tags:
      - Status
      summary: retrieve the status of a job
      operationId: getStatus
      parameters:
      - name: id
        in: path
        description: The id of a process
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: jobID
        in: path
        description: The id of a job
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The status of a job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/statusInfo'
        "404":
          description: The process with id {id} or the job with id {jobID} does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
  /processes/{id}/jobs/{jobID}/results:
    get:
      tags:
      - Result
      summary: retrieve the result(s) of a job
      operationId: getResult
      parameters:
      - name: id
        in: path
        description: The id of a process
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: jobID
        in: path
        description: The id of a job
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The result of a job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        "404":
          description: The process with id {id} or the job with id {jobID} does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        "500":
          description: The job execution failed due to a internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        default:
          description: An error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
components:
  schemas:
    additionalParameter:
      required:
      - name
      - value
      type: object
      properties:
        name:
          type: string
        value:
          type: array
          items:
            oneOf:
            - type: string
            - type: number
            - type: integer
            - type: array
              items: {}
            - type: object
    allowedValues:
      type: array
      items:
        oneOf:
        - type: string
        - $ref: '#/components/schemas/range'
    anyValue:
      type: object
      properties:
        anyValue:
          type: boolean
          default: true
    boundingBoxData:
      required:
      - bbox
      type: object
      properties:
        crs:
          type: string
          format: uri
        bbox:
          maxItems: 6
          minItems: 4
          type: array
          items:
            type: number
    boundingBoxDataType:
      required:
      - supportedCRS
      type: object
      properties:
        supportedCRS:
          type: array
          items:
            $ref: '#/components/schemas/supportedCRS'
    complexDataType:
      required:
      - formats
      type: object
      properties:
        formats:
          type: array
          items:
            $ref: '#/components/schemas/formatDescription'
    confClasses:
      required:
      - conformsTo
      type: object
      properties:
        conformsTo:
          type: array
          items:
            type: string
            example: http://www.opengis.net/spec/ogcapi_processes/1.0/req/core
    descriptionType:
      required:
      - id
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        keywords:
          type: array
          items:
            type: string
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/metadata'
        additionalParameters:
          allOf:
          - $ref: '#/components/schemas/metadata'
          - type: object
            properties:
              parameters:
                type: array
                items:
                  $ref: '#/components/schemas/additionalParameter'
    exception:
      required:
      - code
      type: object
      properties:
        code:
          type: string
        description:
          type: string
    execute:
      required:
      - id
      - mode
      - outputs
      - response
      type: object
      properties:
        id:
          type: string
        inputs:
          $ref: '#/components/schemas/input'
        outputs:
          $ref: '#/components/schemas/output'
        mode:
          type: string
          enum:
          - sync
          - async
          - auto
        response:
          type: string
          enum:
          - raw
          - document
        subscriber:
          $ref: '#/components/schemas/subscriber'
    format:
      required:
      - mimeType
      type: object
      properties:
        mimeType:
          type: string
        schema:
          type: string
        encoding:
          type: string
    formatDescription:
      allOf:
      - $ref: '#/components/schemas/format'
      - type: object
        properties:
          maximumMegabytes:
            type: integer
          default:
            type: boolean
            default: false
    inlineOrRefData:
      type: object
      properties:
        dataType:
          $ref: '#/components/schemas/nameReferenceType'
        uom:
          $ref: '#/components/schemas/nameReferenceType'
        format:
          $ref: '#/components/schemas/format'
        href:
          type: string
          format: uri
        value:
          oneOf:
          - type: string
          - type: number
          - type: boolean
          - type: object
      oneOf:
      - required:
        - href
      - required:
        - value
    input:
      type: object
      additionalProperties:
        oneOf:
        - $ref: '#/components/schemas/inlineOrRefData'
        - $ref: '#/components/schemas/boundingBoxData'
        - $ref: '#/components/schemas/input'
        - type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/inlineOrRefData'
            - $ref: '#/components/schemas/boundingBoxData'
            - $ref: '#/components/schemas/input'
    inputDescription:
      allOf:
      - $ref: '#/components/schemas/descriptionType'
      - type: object
        properties:
          input:
            oneOf:
            - $ref: '#/components/schemas/complexDataType'
            - $ref: '#/components/schemas/literalDataType'
            - $ref: '#/components/schemas/boundingBoxDataType'
          minOccurs:
            type: integer
          maxOccurs:
            oneOf:
            - type: integer
            - type: string
              enum:
              - unbounded
          observedProperty:
            $ref: '#/components/schemas/observedProperty'
    jobControlOptions:
      type: string
      enum:
      - sync-execute
      - async-execute
    jobList:
      type: array
      items:
        $ref: '#/components/schemas/statusInfo'
    landingPage:
      required:
      - links
      type: object
      properties:
        title:
          type: string
          example: Example processing server
        description:
          type: string
          example: Example server implementing the OGC API - Processes 1.0
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
    link:
      required:
      - href
      type: object
      properties:
        href:
          type: string
        rel:
          type: string
          example: service
        type:
          type: string
          example: application/json
        hreflang:
          type: string
          example: en
        title:
          type: string
    literalDataDomain:
      type: object
      properties:
        valueDefinition:
          oneOf:
          - $ref: '#/components/schemas/allowedValues'
          - $ref: '#/components/schemas/anyValue'
          - $ref: '#/components/schemas/valuesReference'
        defaultValue:
          type: string
        dataType:
          $ref: '#/components/schemas/nameReferenceType'
        uom:
          $ref: '#/components/schemas/nameReferenceType'
    literalDataType:
      required:
      - literalDataDomains
      type: object
      properties:
        literalDataDomains:
          type: array
          items:
            $ref: '#/components/schemas/literalDataDomain'
    metadata:
      type: object
      properties:
        title:
          type: string
        role:
          type: string
        href:
          type: string
    nameReferenceType:
      required:
      - name
      type: object
      properties:
        name:
          type: string
        reference:
          type: string
          format: uri
    observedProperty:
      properties:
        name:
          type: string
        uri:
          type: string
          format: uri
        description:
          type: string
    output:
      type: object
      additionalProperties:
        type: object
        properties:
          format:
            $ref: '#/components/schemas/format'
          transmissionMode:
            $ref: '#/components/schemas/transmissionMode'
    outputDescription:
      allOf:
      - $ref: '#/components/schemas/descriptionType'
      - type: object
        properties:
          output:
            oneOf:
            - $ref: '#/components/schemas/complexDataType'
            - $ref: '#/components/schemas/literalDataType'
            - $ref: '#/components/schemas/boundingBoxDataType'
          observedProperty:
            $ref: '#/components/schemas/observedProperty'
    process:
      allOf:
      - $ref: '#/components/schemas/processSummary'
      - type: object
        properties:
          inputs:
            type: array
            items:
              $ref: '#/components/schemas/inputDescription'
          outputs:
            type: array
            items:
              $ref: '#/components/schemas/outputDescription'
    processList:
      type: array
      items:
        $ref: '#/components/schemas/processSummary'
    processSummary:
      allOf:
      - $ref: '#/components/schemas/descriptionType'
      - required:
        - version
        type: object
        properties:
          version:
            type: string
          jobControlOptions:
            type: array
            items:
              $ref: '#/components/schemas/jobControlOptions'
          outputTransmission:
            type: array
            items:
              $ref: '#/components/schemas/transmissionMode'
          links:
            type: array
            items:
              $ref: '#/components/schemas/link'
    range:
      type: object
      properties:
        minimumValue:
          type: string
        maximumValue:
          type: string
        spacing:
          type: string
        rangeClosure:
          type: string
          enum:
          - closed
          - open
          - open-closed
          - closed-open
    result:
      type: object
      additionalProperties:
        oneOf:
        - $ref: '#/components/schemas/inlineOrRefData'
        - $ref: '#/components/schemas/boundingBoxData'
        - type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/inlineOrRefData'
            - $ref: '#/components/schemas/boundingBoxData'
    statusInfo:
      required:
      - jobID
      - status
      type: object
      properties:
        jobID:
          type: string
        status:
          type: string
          enum:
          - accepted
          - running
          - successful
          - failed
          - dismissed
        message:
          type: string
        progress:
          maximum: 100
          minimum: 0
          type: integer
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
    subscriber:
      required:
      - successUrl
      type: object
      properties:
        successUri:
          type: string
          format: uri
        inProgressUri:
          type: string
          format: uri
        failedUri:
          type: string
          format: uri
      description: |-
        Optional URIs for callbacks for this job.

        Support for this parameter is not required and the parameter may be
        removed from the API definition, if conformance class **'callback'**
        is not listed in the conformance declaration under `/conformance`.
    supportedCRS:
      type: object
      properties:
        crs:
          type: string
        default:
          type: boolean
          default: false
    transmissionMode:
      type: string
      enum:
      - value
      - reference
    valuesReference:
      type: string
      format: uri
    inline_response_200:
      oneOf:
      - $ref: '#/components/schemas/result'
      - $ref: '#/components/schemas/exception'
      - type: object
      - type: string
        description: Single binary data output.
        format: binary
      - type: string
        description: Single data output encoded in base64.
        format: byte
      - type: string
        description: Text-based single data output.
      - type: number
      - type: boolean
