openapi: 3.0.0
info:
  title: 'Building Blocks specified in OGC API - Tiles - Part 1: Core'
  description: 'Draft example of OGC API - Tiles - Part 1 OpenAPI docs. This document is not an OGC Standard. This document is distributed for review and comment. This document is subject to change without notice and may not be referred to as an OGC Standard. Recipients of this document are invited to submit, with their comments, notification of any relevant patent rights of which they are aware and to provide supporting documentation.'
  version: 0.0.1
  contact:
    name: "Open Geospatial Consortium (OGC)"
    email: standards-team@ogc.org
    url: 'https://www.ogc.org/contacts'
  license:
    name: OGC License
    url: http://www.opengeospatial.org/legal/
  x-logo:
    url: 'https://www.ogc.org/pub/www/files/OGC_Logo_2D_Blue_x_0_0.png'
tags:
- name: OGC API Common
  description: Common characteristics of this API
- name: Tile Matrix Sets
  description: Metadata about tileMatrixSets
- name: TileSets
  description: Tilesets definitions
- name: Geospatial Resource Vector Tiles
  description: Data partitioned into a hierarchy of tiles of a collection
- name: Dataset Tiles
  description: Data representations, partitioned into a hierarchy of tiles of one
    or more geospatial data resources.
paths:
  /:
    get:
      tags:
      - OGC API Common
      summary: landing page
      description: The landing page provides links to the API definition, the conformance
        statements and to the feature collections in this dataset.
      operationId: getLandingPage
      parameters:
      - name: f
        in: query
        description: |-
          The format of the response. If no value is provided, the standard http
          rules apply, i.e., the accept header is used to determine the format.

          Pre-defined values are "json" and "html". The response to other
          values is determined by the server.
        required: false
        style: form
        explode: false
        schema:
          type: string
          enum:
          - application/json
          - text/html
        example: application/json
      responses:
        "200":
          description: Links to the API capabilities and the TileMatrixSets shared
            by this API.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/landingPage'
            text/html:
              schema:
                type: string
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
  /conformance:
    get:
      tags:
      - OGC API Common
      description: |-
        A list of all requirements classes specified in a standard that the
        server conforms to.
      operationId: getConformanceDeclaration
      parameters:
      - name: f
        in: query
        description: |-
          The format of the response. If no value is provided, the standard http
          rules apply, i.e., the accept header is used to determine the format.

          The only pre-defined value is "json". The response to other values is
          determined by the server.
        required: false
        style: form
        explode: false
        schema:
          type: string
          enum:
          - application/json
        example: application/json
      responses:
        "200":
          description: the URIs of all requirements classes supported by this API
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/confClasses'
              example:
                conformsTo:
                - http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/core
                - http://www.opengis.net/spec/ogcapi-common-2/1.0/conf/collections
                - http://www.opengis.net/spec/ogcapi-features-1/1.1/conf/oas30
                - http://www.opengis.net/spec/ogcapi-features-1/1.1/conf/html
                - http://www.opengis.net/spec/ogcapi-features-1/1.1/conf/geojson
                - http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/tileset
                - http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/tilesets
                - http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/dataset
                - http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/geodata
                - http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/tmxs
                - http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/info
        "400":
          description: Invalid or unknown query parameters
        "406":
          description: The media types accepted by the client are not supported for
            this resource
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
  /collections:
    get:
      tags:
      - OGC API Common
      summary: the collections in the dataset
      operationId: getCollections
      parameters:
      - name: f
        in: query
        description: |-
          The format of the response. If no value is provided, the standard http
          rules apply, i.e., the accept header is used to determine the format.

          Pre-defined values are "json" and "html". The response to other
          values is determined by the server.
        required: false
        style: form
        explode: false
        schema:
          type: string
          enum:
          - application/json
          - text/html
        example: application/json
      responses:
        "200":
          description: |-
            The collections (geospatial data resources) shared by this API.

            This response can be references directly for every service that wants only essential information at the collections level. /collections/collectionId might return more information.

            The dataset is organized as one or more collections. This resource provides information about and how to access the collections.

            The response contains the list of collections. For each collection, a link
            to other resources present (e.g. the items in the collection, path `/collections/{collectionId}/items`,
            link relation `items`, a map created with data from  collection, path `/collections/{collectionId}/map`,
            link relation `map`) as well as key information about the collection.
            This information includes, but is not limited to:

            * A local identifier for the collection that is unique for the dataset;
            * A list of coordinate reference systems (CRS) in which geometries may be returned by the server. The first CRS is the default coordinate reference system (the default is always WGS84 with axis order longitude/latitude);
            * An optional title and description for the collection;
            * An optional extent that can be used to provide an indication of the spatial and temporal extent of the collection - typically derived from the data;
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collections'
            text/html:
              schema:
                type: string
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
  /collections/{collectionId}:
    get:
      tags:
      - OGC API Common
      summary: describe a collection
      operationId: describeCollection
      parameters:
      - name: collectionId
        in: path
        description: local identifier of a collection
        required: true
        schema:
          type: string
      - name: f
        in: query
        description: |-
          The format of the response. If no value is provided, the standard http
          rules apply, i.e., the accept header is used to determine the format.

          Pre-defined values are "json" and "html". The response to other
          values is determined by the server.
        required: false
        style: form
        explode: false
        schema:
          type: string
          enum:
          - application/json
          - text/html
        example: application/json
      responses:
        "200":
          description: Metadata about the collection including style information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collection'
            text/html:
              schema:
                type: string
        "404":
          description: The requested URI was not found
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
  /tileMatrixSets:
    get:
      tags:
      - Tile Matrix Sets
      summary: fetch all available tile matrix sets (tiling schemes)
      operationId: getTileMatrixSets
      parameters:
      - name: f
        in: query
        description: |-
          The format of the response. If no value is provided, the standard http
          rules apply, i.e., the accept header is used to determine the format.

          The only pre-defined value is "json". The response to other values is
          determined by the server.
        required: false
        style: form
        explode: false
        schema:
          type: string
          enum:
          - application/json
        example: application/json
      responses:
        "200":
          description: An array of tile matrix sets (tiling schemes).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tileMatrixSets'
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
  /tileMatrixSets/{tileMatrixSetId}:
    get:
      tags:
      - Tile Matrix Sets
      summary: fetch a tile matrix sets (tiling scheme) by id
      operationId: getTileMatrixSetDescription
      parameters:
      - name: tileMatrixSetId
        in: path
        description: Identifier of a specific tiling scheme. It can be one of those
          specified in Annex D.1 of the OGC 17-083r2 standard or one defined in this
          service.
        required: true
        schema:
          type: string
        example: WebMercatorQuad
      - name: f
        in: query
        description: |-
          The format of the response. If no value is provided, the standard http
          rules apply, i.e., the accept header is used to determine the format.

          The only pre-defined value is "json". The response to other values is
          determined by the server.
        required: false
        style: form
        explode: false
        schema:
          type: string
          enum:
          - application/json
        example: application/json
      responses:
        "200":
          description: tile matrix sets (a tiling scheme).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tileMatrixSet'
        "404":
          description: The requested URI was not found
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
  /collections/{collectionId}/tiles:
    get:
      tags:
      - TileSets
      summary: fetch a tiles description
      description: Retrieves the tiles description for this collection including the
        `links` to get a `tile`, the `TileMatrixSetLink` and the `infoTemplate`
      operationId: describeTiles
      parameters:
      - name: collectionId
        in: path
        description: local identifier of a collection
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Description of the tiles.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tiles'
        "404":
          description: The requested URI was not found
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
  /collections/{collectionId}/tiles/{tileMatrixSetId}:
    get:
      tags:
      - TileSets
      summary: fetch a tileset description
      description: Retrieves the tiles description for this collection including the
        `links` to get a `tile`, the `TileMatrixSetLink` and the `infoTemplate`
      operationId: describeTileset
      parameters:
      - name: collectionId
        in: path
        description: local identifier of a collection
        required: true
        schema:
          type: string
      - name: tileMatrixSetId
        in: path
        description: Identifier of a specific tiling scheme. It can be one of those
          specified in Annex D.1 of the OGC 17-083r2 standard or one defined in this
          service.
        required: true
        schema:
          type: string
        example: WebMercatorQuad
      responses:
        "200":
          description: Description of the tileset.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tile-set'
        "404":
          description: The requested URI was not found
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
  /tiles:
    get:
      tags:
      - TileSets
      summary: fetch a tiles description
      description: Retrieves the tiles description for this collection including the
        `links` to get a `tile`
      operationId: describeTilesCollections
      responses:
        "200":
          description: Description of the tiles.
          content:
            application/json:
              schema:
                required:
                - links
                type: object
                properties:
                  links:
                    type: array
                    example:
                    - href: http://data.example.com/tiles
                      rel: self
                      type: application/json
                    - href: http://data.example.com/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}.png
                      templated: true
                      rel: item
                      type: image/png
                    - href: http://data.example.com/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}/info
                      templated: true
                      rel: info
                      type: text/html
                    items:
                      $ref: '#/components/schemas/link'
        "404":
          description: The requested URI was not found
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
  /collections/{collectionId}/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}:
    get:
      tags:
      - Geospatial Resource Vector Tiles
      summary: fetch a tile from a collection
      description: Retrieves the tile in the requested tileMatrixSet, on the requested
        tileMatrix in the TileMatrixSet, with the requested tile indices (tileRow,
        tileCol). The tile has a single collection (formerly refered as layer) with
        all selected features in the bounding box of the tile. The feature properties
        to include in the tile representation can be limited using a query parameter.
      operationId: getTileOfCollectionId
      parameters:
      - name: collectionId
        in: path
        description: local identifier of a collection
        required: true
        schema:
          type: string
      - name: tileMatrixSetId
        in: path
        description: Identifier of a specific tiling scheme. It can be one of those
          specified in Annex D.1 of the OGC 17-083r2 standard or one defined in this
          service.
        required: true
        schema:
          type: string
        example: WebMercatorQuad
      - name: tileMatrix
        in: path
        description: |-
          Identifier selecting one of the scales defined in the TileMatrixSet and representing the scaleDenominator the tile. For example,
          Ireland is fully within the Tile at tileMatrix=5, tileRow=10 and tileCol=15.
        required: true
        schema:
          type: string
        example: "11"
      - name: tileRow
        in: path
        description: Row index of the tile on the selected TileMatrix. It cannot exceed
          the MatrixWidth-1 for the selected TileMatrix. For example, Ireland is fully
          within the Tile at tileMatrix=5, tileRow=10 and tileCol=15.
        required: true
        schema:
          minimum: 0
          type: integer
        example: "827"
      - name: tileCol
        in: path
        description: Column index of the tile on the selected TileMatrix. It cannot
          exceed the MatrixHeight-1 for the selected TileMatrix. For example, Ireland
          is fully within the Tile at tileMatrix=5, tileRow=10 and tileCol=15.
        required: true
        schema:
          minimum: 0
          type: integer
        example: 1231
      - name: datetime
        in: query
        description: |-
          Either a date-time or an interval, open or closed. Date and time expressions
          adhere to RFC 3339. Open intervals are expressed using double-dots.

          Examples:

          * A date-time: "2018-02-12T23:20:50Z"
          * A closed interval: "2018-02-12T00:00:00Z/2018-03-18T12:31:12Z"
          * Open intervals: "2018-02-12T00:00:00Z/.." or "../2018-03-18T12:31:12Z"

          Only elemenets that have a temporal property that intersects the value of
          `datetime` are selected.

          If a element has multiple temporal properties, it is the decision of the
          server whether only a single temporal property is used to determine
          the extent or all relevant temporal properties.
        required: false
        style: form
        explode: false
        schema:
          type: string
      - name: f
        in: query
        description: |-
          The format of the response. If no value is provided, the standard http rules apply, i.e., the accept header is used to determine the format.

          Pre-defined values are "mvt" for a Mapbox Vector Tile, "json" for a GeoJSON tiled feature collection and jpeg, png or gif for image based tiles
          The response to other values is determined by the server.
        required: false
        style: form
        explode: false
        schema:
          type: string
          enum:
          - mvt
          - json
        example: json
      responses:
        "200":
          description: A tile of the collection.
          content:
            image/mvt:
              schema:
                type: string
              example: MVT image
            application/geo+json:
              schema:
                $ref: '#/components/schemas/featureCollectionGeoJSON'
        "404":
          description: The requested URI was not found
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
  /collections/{collectionId}/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}/info:
    get:
      tags:
      - Geospatial Resource Vector Tiles
      summary: fetch information about a point on a tile from a collection
      description: Retrieves inforamtion on a point of a tile in the requested tileMatrixSet,
        on the requested tileMatrix in the TileMatrixSet, with the requested tile
        indices (tileRow, tileCol). The tile has a single collection (formerly refered
        as layer) with all selected features in the bounding box of the tile. The
        feature properties to include in the tile representation can be limited using
        a query parameter.
      operationId: getFeatureInfoTileOfCollectionId
      parameters:
      - name: collectionId
        in: path
        description: local identifier of a collection
        required: true
        schema:
          type: string
      - name: tileMatrixSetId
        in: path
        description: Identifier of a specific tiling scheme. It can be one of those
          specified in Annex D.1 of the OGC 17-083r2 standard or one defined in this
          service.
        required: true
        schema:
          type: string
        example: WebMercatorQuad
      - name: tileMatrix
        in: path
        description: |-
          Identifier selecting one of the scales defined in the TileMatrixSet and representing the scaleDenominator the tile. For example,
          Ireland is fully within the Tile at tileMatrix=5, tileRow=10 and tileCol=15.
        required: true
        schema:
          type: string
        example: "11"
      - name: tileRow
        in: path
        description: Row index of the tile on the selected TileMatrix. It cannot exceed
          the MatrixWidth-1 for the selected TileMatrix. For example, Ireland is fully
          within the Tile at tileMatrix=5, tileRow=10 and tileCol=15.
        required: true
        schema:
          minimum: 0
          type: integer
        example: "827"
      - name: tileCol
        in: path
        description: Column index of the tile on the selected TileMatrix. It cannot
          exceed the MatrixHeight-1 for the selected TileMatrix. For example, Ireland
          is fully within the Tile at tileMatrix=5, tileRow=10 and tileCol=15.
        required: true
        schema:
          minimum: 0
          type: integer
        example: 1231
      - name: i
        in: query
        description: Horizontal (x) coordinate within a map or tile.
        required: true
        schema:
          type: number
      - name: j
        in: query
        description: Vertical (y) coordinate within a map or tile.
        required: true
        schema:
          type: number
      - name: infoTemplate
        in: query
        description: Template used for the information response. This parameter can
          be used to select among GML application schemas or JSON schemas and provide
          alternative presentations for the same information. If the parameter is
          missing, the server will select the first template available.
        explode: false
        schema:
          type: string
      - name: fTile
        in: query
        description: "The format of the response. \nPre-defined values are \"mvt\"\
          \ for a Mapbox Vector Tile, \"json\" for a GeoJSON tiled feature collection\
          \ and jpeg, png or gif for image based tiles\nThe response to other values\
          \ is determined by the server."
        required: false
        style: form
        explode: false
        schema:
          type: string
          enum:
          - mvt
          - json
        example: json
      - name: datetime
        in: query
        description: |-
          Either a date-time or an interval, open or closed. Date and time expressions
          adhere to RFC 3339. Open intervals are expressed using double-dots.

          Examples:

          * A date-time: "2018-02-12T23:20:50Z"
          * A closed interval: "2018-02-12T00:00:00Z/2018-03-18T12:31:12Z"
          * Open intervals: "2018-02-12T00:00:00Z/.." or "../2018-03-18T12:31:12Z"

          Only elemenets that have a temporal property that intersects the value of
          `datetime` are selected.

          If a element has multiple temporal properties, it is the decision of the
          server whether only a single temporal property is used to determine
          the extent or all relevant temporal properties.
        required: false
        style: form
        explode: false
        schema:
          type: string
      - name: f
        in: query
        description: |-
          The format of the response. If no value is provided, the standard http
          rules apply, i.e., the accept header is used to determine the format.

          Pre-defined values are "json" and "html". The response to other
          values is determined by the server.
        required: false
        style: form
        explode: false
        schema:
          type: string
          enum:
          - application/json
          - text/html
        example: application/json
      responses:
        "200":
          description: A getFeatureInfo of a tile
          content:
            application/geo+json:
              schema:
                $ref: '#/components/schemas/featureCollectionGeoJSON'
        "404":
          description: The requested URI was not found
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
  /tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}:
    get:
      tags:
      - Dataset Tiles
      summary: fetch a tile from one or more geospatial data resources
      description: Retrieves a tile in the requested tileMatrixSet, on the requested
        tileMatrix in the TileMatrixSet, with the requested tile indices (tileRow,
        tileCol). The tile has multiple collections (formerly refered as layers) with
        all selected features in the bounding box of the tile.
      operationId: getTileCollections
      parameters:
      - name: geodata
        in: query
        description: The collections that should be included in the response. The
          parameter value is a comma-separated list of collection identifiers. If
          the parameters is missing, some or all collections will be included.
        required: false
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: tileMatrixSetId
        in: path
        description: Identifier of a specific tiling scheme. It can be one of those
          specified in Annex D.1 of the OGC 17-083r2 standard or one defined in this
          service.
        required: true
        schema:
          type: string
        example: WebMercatorQuad
      - name: tileMatrix
        in: path
        description: |-
          Identifier selecting one of the scales defined in the TileMatrixSet and representing the scaleDenominator the tile. For example,
          Ireland is fully within the Tile at tileMatrix=5, tileRow=10 and tileCol=15.
        required: true
        schema:
          type: string
        example: "11"
      - name: tileRow
        in: path
        description: Row index of the tile on the selected TileMatrix. It cannot exceed
          the MatrixWidth-1 for the selected TileMatrix. For example, Ireland is fully
          within the Tile at tileMatrix=5, tileRow=10 and tileCol=15.
        required: true
        schema:
          minimum: 0
          type: integer
        example: "827"
      - name: tileCol
        in: path
        description: Column index of the tile on the selected TileMatrix. It cannot
          exceed the MatrixHeight-1 for the selected TileMatrix. For example, Ireland
          is fully within the Tile at tileMatrix=5, tileRow=10 and tileCol=15.
        required: true
        schema:
          minimum: 0
          type: integer
        example: 1231
      - name: datetime
        in: query
        description: |-
          Either a date-time or an interval, open or closed. Date and time expressions
          adhere to RFC 3339. Open intervals are expressed using double-dots.

          Examples:

          * A date-time: "2018-02-12T23:20:50Z"
          * A closed interval: "2018-02-12T00:00:00Z/2018-03-18T12:31:12Z"
          * Open intervals: "2018-02-12T00:00:00Z/.." or "../2018-03-18T12:31:12Z"

          Only elemenets that have a temporal property that intersects the value of
          `datetime` are selected.

          If a element has multiple temporal properties, it is the decision of the
          server whether only a single temporal property is used to determine
          the extent or all relevant temporal properties.
        required: false
        style: form
        explode: false
        schema:
          type: string
      - name: elevation
        in: query
        description: Elevation value
        required: false
        style: form
        explode: false
        schema:
          type: number
      - name: f
        in: query
        description: |-
          The format of the response. If no value is provided, the standard http rules apply, i.e., the accept header is used to determine the format.

          Pre-defined values are "mvt" for a Mapbox Vector Tile, "json" for a GeoJSON tiled feature collection and jpeg, png or gif for image based tiles
          The response to other values is determined by the server.
        required: false
        style: form
        explode: false
        schema:
          type: string
          enum:
          - mvt
          - json
        example: json
      responses:
        "200":
          description: A tile of the collection.
          content:
            image/mvt:
              schema:
                type: string
              example: MVT image
            application/geo+json:
              schema:
                $ref: '#/components/schemas/featureCollectionGeoJSON'
        "404":
          description: The requested URI was not found
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
  /tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}/info:
    get:
      tags:
      - Dataset Tiles
      summary: fetch information about a point in a tile from one or more geospatial
        data resources
      description: Retrieves information about a point of a tile in the requested
        tileMatrixSet, on the requested tileMatrix in the TileMatrixSet, with the
        requested tile indices (tileRow, tileCol). The tile has a single collection
        (formerly refered as layer) with all selected features in the bounding box
        of the tile. The feature properties to include in the tile representation
        can be limited using a query parameter.
      operationId: getFeatureInfoTileOfCollections
      parameters:
      - name: geodata
        in: query
        description: The collections that should be included in the response. The
          parameter value is a comma-separated list of collection identifiers. If
          the parameters is missing, some or all collections will be included.
        required: false
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: tileMatrixSetId
        in: path
        description: Identifier of a specific tiling scheme. It can be one of those
          specified in Annex D.1 of the OGC 17-083r2 standard or one defined in this
          service.
        required: true
        schema:
          type: string
        example: WebMercatorQuad
      - name: tileMatrix
        in: path
        description: |-
          Identifier selecting one of the scales defined in the TileMatrixSet and representing the scaleDenominator the tile. For example,
          Ireland is fully within the Tile at tileMatrix=5, tileRow=10 and tileCol=15.
        required: true
        schema:
          type: string
        example: "11"
      - name: tileRow
        in: path
        description: Row index of the tile on the selected TileMatrix. It cannot exceed
          the MatrixWidth-1 for the selected TileMatrix. For example, Ireland is fully
          within the Tile at tileMatrix=5, tileRow=10 and tileCol=15.
        required: true
        schema:
          minimum: 0
          type: integer
        example: "827"
      - name: tileCol
        in: path
        description: Column index of the tile on the selected TileMatrix. It cannot
          exceed the MatrixHeight-1 for the selected TileMatrix. For example, Ireland
          is fully within the Tile at tileMatrix=5, tileRow=10 and tileCol=15.
        required: true
        schema:
          minimum: 0
          type: integer
        example: 1231
      - name: i
        in: query
        description: Horizontal (x) coordinate within a map or tile.
        required: true
        schema:
          type: number
      - name: j
        in: query
        description: Vertical (y) coordinate within a map or tile.
        required: true
        schema:
          type: number
      - name: infoTemplate
        in: query
        description: Template used for the information response. This parameter can
          be used to select among GML application schemas or JSON schemas and provide
          alternative presentations for the same information. If the parameter is
          missing, the server will select the first template available.
        explode: false
        schema:
          type: string
      - name: fTile
        in: query
        description: "The format of the response. \nPre-defined values are \"mvt\"\
          \ for a Mapbox Vector Tile, \"json\" for a GeoJSON tiled feature collection\
          \ and jpeg, png or gif for image based tiles\nThe response to other values\
          \ is determined by the server."
        required: false
        style: form
        explode: false
        schema:
          type: string
          enum:
          - mvt
          - json
        example: json
      - name: datetime
        in: query
        description: |-
          Either a date-time or an interval, open or closed. Date and time expressions
          adhere to RFC 3339. Open intervals are expressed using double-dots.

          Examples:

          * A date-time: "2018-02-12T23:20:50Z"
          * A closed interval: "2018-02-12T00:00:00Z/2018-03-18T12:31:12Z"
          * Open intervals: "2018-02-12T00:00:00Z/.." or "../2018-03-18T12:31:12Z"

          Only elemenets that have a temporal property that intersects the value of
          `datetime` are selected.

          If a element has multiple temporal properties, it is the decision of the
          server whether only a single temporal property is used to determine
          the extent or all relevant temporal properties.
        required: false
        style: form
        explode: false
        schema:
          type: string
      - name: elevation
        in: query
        description: Elevation value
        required: false
        style: form
        explode: false
        schema:
          type: number
      - name: f
        in: query
        description: |-
          The format of the response. If no value is provided, the standard http
          rules apply, i.e., the accept header is used to determine the format.

          Pre-defined values are "json" and "html". The response to other
          values is determined by the server.
        required: false
        style: form
        explode: false
        schema:
          type: string
          enum:
          - application/json
          - text/html
        example: application/json
      responses:
        "200":
          description: A getFeatureInfo of a tile
          content:
            application/geo+json:
              schema:
                $ref: '#/components/schemas/featureCollectionGeoJSON'
        "404":
          description: The requested URI was not found
        "500":
          description: A server error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
components:
  schemas:
    landingPage:
      allOf:
      - $ref: '#/components/schemas/landingPage_2'
      - $ref: '#/components/schemas/landingPage-link'
    landingPage-link:
      required:
      - links
      type: object
      properties:
        links:
          type: array
          example:
          - href: http://data.example.org/?f=json
            rel: self
            type: application/json
            title: this document
          - href: http://data.example.org/?f=html
            rel: alternate
            type: text/html
            title: this document in HTML
          - href: http://data.example.org/api?f=json
            rel: service
            type: application/vnd.oai.openapi+json;version=3.0
            title: the API definition in OpenAPI 3.0 JSON
          - href: http://data.example.org/api?f=html
            rel: service
            type: text/html
            title: the API definition in HTML
          - href: http://data.example.org/conformance?f=json
            rel: conformance
            type: application/json
            title: the list of conformance classes implemented by this API
          - href: http://data.example.org/collections?f=json
            rel: data
            type: application/json
            title: The collections in the dataset in JSON
          - href: http://data.example.org/collections?f=html
            rel: data
            type: text/html
            title: The collections in the dataset in HTML
          - href: http://data.example.org/tileMatrixSets?f=json
            rel: tiling-schema
            type: application/json
            title: List of tileMatrixSets implemented by this API in JSON
          - href: http://data.example.org/tileMatrixSets?f=html
            rel: tiling-schema
            type: text/html
            title: List of tileMatrixSets implemented by this API in HTML
          - href: http://data.example.org/tiles
            rel: tilesets
            type: application/json
            title: Link to information on tiles combining more than one collection
          items:
            $ref: '#/components/schemas/link'
    collection:
      allOf:
      - $ref: '#/components/schemas/collection_2'
      - $ref: '#/components/schemas/collection-link'
    collection-link:
      required:
      - links
      type: object
      properties:
        links:
          type: array
          example:
          - href: http://example.com/collections/buildings?f=json
            rel: self
            type: application/json
            title: This document
          - href: http://example.com/concepts/buildings.html
            rel: describedby
            type: text/html'
          - href: https://creativecommons.org/publicdomain/zero/1.0/
            rel: license
            type: text/html
            title: CC0-1.0
          - href: https://creativecommons.org/publicdomain/zero/1.0/rdf
            rel: license
            type: application/rdf+xml
            title: CC0-1.0
          - href: http://data.example.com/collections/buildings/items
            rel: items
            title: Retrieve the items of the buildings collection
            type: application/geo+json
          - href: http://data.example.com/collections/buildings/tiles
            rel: tiles
            type: application/json
          items:
            $ref: '#/components/schemas/link'
    tile-set:
      allOf:
      - $ref: https://api.swaggerhub.com/domains/UAB-CREAF/ogc-api-tiles/1.0.0#/components/schemas/tile-set
      - $ref: '#/components/schemas/tile-set-link'
    tiles:
      allOf:
      - $ref: https://api.swaggerhub.com/domains/UAB-CREAF/ogc-api-tiles/1.0.0#/components/schemas/tiles
      - $ref: '#/components/schemas/tiles-link'
    tile-set-link:
      required:
      - links
      type: object
      properties:
        links:
          type: array
          example:
          - href: http://data.example.com/collections/buildings/tiles/WebMercatorQuad
            rel: self
            type: application/json
          - href: http://data.example.com/collections/buildings/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}.png
            templated: true
            rel: item
            type: image/png
          - href: http://data.example.com/collections/buildings/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}/info
            templated: true
            rel: info
            type: text/html
          items:
            $ref: https://api.swaggerhub.com/domains/UAB-CREAF/ogc-api-common/1.0.0#/components/schemas/link
    tiles-link:
      required:
      - links
      type: object
      properties:
        links:
          type: array
          example:
          - href: http://data.example.com/collections/buildings/tiles
            rel: self
            type: application/json
          - href: http://data.example.com/collections/buildings/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}.png
            templated: true
            rel: item
            type: image/png
          - href: http://data.example.com/collections/buildings/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}/info
            templated: true
            rel: info
            type: text/html
          items:
            $ref: https://api.swaggerhub.com/domains/UAB-CREAF/ogc-api-common/1.0.0#/components/schemas/link
    exception:
      required:
      - code
      type: object
      properties:
        code:
          type: string
        description:
          type: string
      example:
        code: "500"
        description: 'An internal server error occured. Incident ID: 1234567. Please
          contact admin@example.org.'
    confClasses:
      required:
      - conformsTo
      type: object
      properties:
        conformsTo:
          type: array
          example:
          - http://www.opengis.net/spec/ogcapi-common-1/1.0/req/core
          items:
            type: string
            format: uri
    collections:
      required:
      - collections
      - links
      type: object
      properties:
        links:
          type: array
          nullable: true
          example:
          - href: http://data.example.org/collections?f=json
            rel: self
            type: application/json
            title: this document
          - href: http://data.example.org/collections?f=html
            rel: alternate
            type: text/html
            title: this document as HTML
          - href: http://schemas.example.org/1.0/dataset.xsd
            rel: describedBy
            type: application/xml
            title: GML application schema for Acme Corporation dataset data
          - href: http://download.example.org/dataset.gpkg
            rel: enclosure
            type: application/geopackage+sqlite3
            title: Bulk download (GeoPackage)
            length: 472546
          items:
            $ref: '#/components/schemas/link'
        collections:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/collection_2'
            - $ref: '#/components/schemas/collection-link_2'
    link:
      required:
      - href
      type: object
      properties:
        href:
          type: string
          example: http://data.example.com/buildings/123
        rel:
          type: string
          example: alternate
        type:
          pattern: ^(?=[-a-z]{1,127}/[-\.a-z0-9]{1,127}$)[a-z]+(-[a-z]+)*/[a-z0-9]+([-\.][a-z0-9]+)*$
          type: string
          example: application/geo+json
        hreflang:
          type: string
          example: en
        title:
          type: string
          example: Trierer Strasse 70, 53115 Bonn
        length:
          minimum: 0
          type: integer
    collection_2:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: identifier of the collection used, for example, in URIs
          example: buildings
        title:
          type: string
          description: human readable title of the collection
          example: Buildings in the city of Bonn
        description:
          type: string
          description: a description of the collection
          example: This collection contains buildings
        keywords:
          type: array
          description: keywords about the elements in the collection
          items:
            $ref: '#/components/schemas/keyword'
        attribution:
          type: string
          description: The provider of the source data for the collection. Map viewers
            normally show this information at the bottom of the map
          example: OpenStreetMap
        extent:
          $ref: https://api.swaggerhub.com/domains/UAB-CREAF/ogc-api-common/1.0.0#/components/schemas/extent
        crs:
          type: array
          description: The list of coordinate reference systems supported by the service.
            The first item is the default coordinate reference system.
          example:
          - http://www.opengis.net/def/crs/OGC/1.3/CRS84
          - http://www.opengis.net/def/crs/EPSG/0/4326
          items:
            type: string
          default:
          - http://www.opengis.net/def/crs/OGC/1.3/CRS84
    keyword:
      required:
      - keyword
      type: object
      properties:
        keyword:
          type: string
          example: land cover
        code:
          type: string
          example: "4612"
        codeSpace:
          type: string
          example: https://www.eionet.europa.eu/gemet/en/concept/
      nullable: true
    extent:
      type: object
      properties:
        spatial:
          $ref: https://api.swaggerhub.com/domains/UAB-CREAF/ogc-api-common/1.0.0#/components/schemas/spatialExtent
        temporal:
          $ref: https://api.swaggerhub.com/domains/UAB-CREAF/ogc-api-common/1.0.0#/components/schemas/temporalExtent
      description: |-
        The extent of the collection. In the Core only spatial and temporal extents are specified. Extensions may add additional members to represent other  extents, for example, thermal or pressure ranges.
        It is recommended that the statial extent is expected in CRS84 except if this is not possible.
    spatialExtent:
      required:
      - bbox
      type: object
      properties:
        bbox:
          $ref: https://api.swaggerhub.com/domains/UAB-CREAF/ogc-api-common/1.0.0#/components/schemas/bbox
        crs:
          $ref: https://api.swaggerhub.com/domains/UAB-CREAF/ogc-api-common/1.0.0#/components/schemas/crs
      description: The spatial extent of the element in the collection.
    bbox:
      minItems: 1
      type: array
      description: |-
        One or more bounding boxes that describe the spatial extent of the dataset.
        In the Core only a single bounding box is supported. Extensions may support
        additional areas. If multiple areas are provided, the union of the bounding
        boxes describes the spatial extent.
      items:
        maxItems: 6
        minItems: 4
        type: array
        description: |-
          West, south, east, north edges of the bounding box. The coordinates
          are in the coordinate reference system specified in `crs`. By default
          this is WGS 84 longitude/latitude.
        example:
        - - 7.01
          - 50.63
          - 7.22
          - 50.78
        items:
          type: number
    crs:
      type: string
      description: |-
        Coordinate reference system of the coordinates in the spatial extent
        (property `bbox`). The default reference system is WGS 84 longitude/latitude.
        In the Core this is the only supported coordinate reference system.
        Extensions may support additional coordinate reference systems and add
        additional enum values.
      default: http://www.opengis.net/def/crs/OGC/1.3/CRS84
      enum:
      - http://www.opengis.net/def/crs/OGC/1.3/CRS84
    temporalExtent:
      type: object
      properties:
        interval:
          $ref: https://api.swaggerhub.com/domains/UAB-CREAF/ogc-api-common/1.0.0#/components/schemas/temporalInterval
        trs:
          $ref: https://api.swaggerhub.com/domains/UAB-CREAF/ogc-api-common/1.0.0#/components/schemas/trs
      description: The temporal extent of the element in the collection.
      nullable: true
    temporalInterval:
      minItems: 1
      type: array
      description: |-
        One or more time intervals that describe the temporal extent of the dataset.
        The value `null` is supported and indicates an open time intervall.
        In the Core only a single time interval is supported. Extensions may support
        multiple intervals. If multiple intervals are provided, the union of the
        intervals describes the temporal extent.
      nullable: true
      items:
        maxItems: 2
        minItems: 2
        type: array
        description: |-
          Begin and end times of the time interval. The timestamps
          are in the coordinate reference system specified in `trs`. By default
          this is the Gregorian calendar.
        example:
        - 2010-02-15T12:34:56Z
        - null
        items:
          type: string
          format: date-time
          nullable: true
    trs:
      type: string
      description: |-
        Coordinate reference system of the coordinates in the temporal extent
        (property `interval`). The default reference system is the Gregorian calendar.
        In the Core this is the only supported temporal reference system.
        Extensions may support additional temporal reference systems and add
        additional enum values.
      default: http://www.opengis.net/def/uom/ISO-8601/0/Gregorian
      enum:
      - http://www.opengis.net/def/uom/ISO-8601/0/Gregorian
    collection-link_2:
      required:
      - links
      type: object
      properties:
        links:
          type: array
          example:
          - href: http://example.com/collections/buildings?f=json
            rel: item
            type: application/json
            title: CollectionId path description in the OpenAPI
          - href: http://example.com/concepts/buildings.html
            rel: describedby
            type: text/html'
          - href: https://creativecommons.org/publicdomain/zero/1.0/
            rel: license
            type: text/html
            title: CC0-1.0
          - href: https://creativecommons.org/publicdomain/zero/1.0/rdf
            rel: license
            type: application/rdf+xml
            title: CC0-1.0
          items:
            $ref: '#/components/schemas/link'
    tileMatrixSets:
      required:
      - tileMatrixSets
      type: object
      properties:
        tileMatrixSets:
          type: array
          example:
          - id: MyWebMercatorQuad
            title: My Google Maps Compatible for the World
            links:
            - href: https://data.example.org/tileMatrixSet/MyWebMercatorQuad
              rel: item
              type: application/json
          items:
            $ref: https://api.swaggerhub.com/domains/UAB-CREAF/ogc-api-common/1.0.0#/components/schemas/id-link
    id-link:
      required:
      - id
      - links
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        links:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/link'
      description: |-
        Reusable object that contains an id to a resource and links where the object is described or a representation retrieved. Typically it is useful for paths like `\resources` and `\resources\{resourceId}`.   `\resources` will respond an array of id-link listing the `resourceId` and the links to get it. \collections and \collections\{collectionId} is an exception to this pattern.
        The fact that `links` is an array can be used to advertise the same object representation in different formats.
      example:
        id: night
        title: Topographic night style
        links:
        - href: https://example.com/api/1.0/styles/night?f=mapbox
          rel: stylesheet
          type: application/vnd.mapbox.style+json
        - href: https://example.com/api/1.0/styles/night?f=sld10
          rel: stylesheet
          type: application/vnd.ogc.sld+xml;version=1.0
    tileMatrixSet:
      required:
      - identifier
      type: object
      properties:
        title:
          type: string
          description: Title of this tile matrix set, normally used for display to
            a human
          example: Google Maps Compatible for the World
        abstract:
          type: string
          description: Brief narrative description of this tile matrix set, normally
            available for display to a human
          example: The most common TileMatrixSet, used in most of the main IT map
            browsers. It was initially popularized by Google Maps
        keywords:
          type: array
          description: Unordered list of one or more commonly used or formalized word(s)
            or phrase(s) used to describe this dataset
          items:
            $ref: https://api.swaggerhub.com/domains/UAB-CREAF/ogc-api-common/1.0.0#/components/schemas/keyword
        identifier:
          type: string
          description: Tile matrix set identifier,
          example: WebMercatorQuad
        supportedCRS:
          type: string
          description: Reference to one coordinate reference system (CRS)
          format: uri
          example: http://www.opengis.net/def/crs/EPSG/0/3857
        wellKnownScaleSet:
          type: string
          description: Reference to a well-known scale set
          example: http://www.opengis.net/def/wkss/OGC/1.0/GoogleMapsCompatible
        tileMatrix:
          type: array
          description: Describes a scale level and its tile matrix
          items:
            $ref: '#/components/schemas/tileMatrix'
    tileMatrix:
      required:
      - identifier
      - matrixHeight
      - matrixWidth
      - scaleDenominator
      - tileHeight
      - tileWidth
      - topLeftCorner
      type: object
      properties:
        title:
          type: string
          description: Title of this tile matrix, normally used for display to a human
          example: Google Maps Compatible for the World zoom level 3
        abstract:
          type: string
          description: Brief narrative description of this tile matrix, normally available
            for display to a human
          example: Google Maps Compatible zoom level 3 that is equivalent to a scale
            of 1:69885283.00358972 and has 19567.87924100512 meters of pixel size
            in the equator
        keywords:
          type: array
          description: keywords about the elements in the collection
          items:
            $ref: https://api.swaggerhub.com/domains/UAB-CREAF/ogc-api-common/1.0.0#/components/schemas/keyword
        identifier:
          type: string
          description: Identifier selecting one of the scales defined in the TileMatrixSet
            and representing the scaleDenominator the tile.
          example: "3"
        scaleDenominator:
          type: number
          description: Scale denominator level of this tile matrix
          example: 69885283.00358972
        topLeftCorner:
          type: array
          description: Position in CRS coordinates of the top-left corner of this
            tile matrix
          example:
          - -2.00375083427892E7
          - 2.00375083427892E7
          items:
            type: number
            format: double
        tileWidth:
          minimum: 1
          type: number
          description: Width of each tile of this tile matrix in pixels
          format: integer
          example: 256
        tileHeight:
          minimum: 1
          type: number
          description: Height of each tile of this tile matrix in pixels
          format: integer
          example: 256
        matrixHeight:
          minimum: 1
          type: number
          description: Width of the matrix (number of tiles in width)
          format: integer
          example: 8
        matrixWidth:
          minimum: 1
          type: number
          description: Height of the matrix (number of tiles in height)
          format: integer
          example: 8
    featureCollectionGeoJSON:
      required:
      - features
      - type
      type: object
      properties:
        type:
          type: string
          enum:
          - FeatureCollection
        features:
          type: array
          items:
            $ref: '#/components/schemas/featureGeoJSON'
        links:
          type: array
          items:
            $ref: https://api.swaggerhub.com/domains/UAB-CREAF/ogc-api-common/1.0.0#/components/schemas/link
        timeStamp:
          $ref: https://api.swaggerhub.com/domains/UAB-CREAF/ogc-api-common/1.0.0#/components/schemas/timeStamp
        numberMatched:
          minimum: 0
          type: integer
        numberReturned:
          minimum: 0
          type: integer
    featureGeoJSON:
      required:
      - geometry
      - properties
      - type
      type: object
      properties:
        type:
          type: string
          enum:
          - Feature
        geometry:
          $ref: https://api.swaggerhub.com/domains/UAB-CREAF/ogc-api-features/1.0.0#/components/schemas/geometryGeoJSON
        properties:
          type: object
          nullable: true
        id:
          oneOf:
          - type: string
          - type: integer
        links:
          type: array
          items:
            $ref: https://api.swaggerhub.com/domains/UAB-CREAF/ogc-api-common/1.0.0#/components/schemas/link
    geometryGeoJSON:
      oneOf:
      - $ref: '#/components/schemas/pointGeoJSON'
      - $ref: '#/components/schemas/multipointGeoJSON'
      - $ref: '#/components/schemas/linestringGeoJSON'
      - $ref: '#/components/schemas/multilinestringGeoJSON'
      - $ref: '#/components/schemas/polygonGeoJSON'
      - $ref: '#/components/schemas/multipolygonGeoJSON'
      - $ref: '#/components/schemas/geometrycollectionGeoJSON'
    pointGeoJSON:
      required:
      - coordinates
      - type
      type: object
      properties:
        type:
          type: string
          enum:
          - Point
        coordinates:
          minItems: 2
          type: array
          items:
            type: number
    multipointGeoJSON:
      required:
      - coordinates
      - type
      type: object
      properties:
        type:
          type: string
          enum:
          - MultiPoint
        coordinates:
          type: array
          items:
            minItems: 2
            type: array
            items:
              type: number
    linestringGeoJSON:
      required:
      - coordinates
      - type
      type: object
      properties:
        type:
          type: string
          enum:
          - LineString
        coordinates:
          minItems: 2
          type: array
          items:
            minItems: 2
            type: array
            items:
              type: number
    multilinestringGeoJSON:
      required:
      - coordinates
      - type
      type: object
      properties:
        type:
          type: string
          enum:
          - MultiLineString
        coordinates:
          type: array
          items:
            minItems: 2
            type: array
            items:
              minItems: 2
              type: array
              items:
                type: number
    polygonGeoJSON:
      required:
      - coordinates
      - type
      type: object
      properties:
        type:
          type: string
          example: Polygon
          enum:
          - Polygon
        coordinates:
          type: array
          example:
          - - - 35.99601746
              - 32.50426061
            - - 36.08110064
              - 32.50426061
            - - 36.08110064
              - 32.57551892
            - - 35.99601746
              - 32.57551892
            - - 35.99601746
              - 32.50426061
          items:
            minItems: 4
            type: array
            items:
              minItems: 2
              type: array
              items:
                type: number
    multipolygonGeoJSON:
      required:
      - coordinates
      - type
      type: object
      properties:
        type:
          type: string
          enum:
          - MultiPolygon
        coordinates:
          type: array
          items:
            type: array
            items:
              minItems: 4
              type: array
              items:
                minItems: 2
                type: array
                items:
                  type: number
    geometrycollectionGeoJSON:
      required:
      - geometries
      - type
      type: object
      properties:
        type:
          type: string
          enum:
          - GeometryCollection
        geometries:
          type: array
          items:
            $ref: '#/components/schemas/geometryGeoJSONNoCollection'
    geometryGeoJSONNoCollection:
      oneOf:
      - $ref: '#/components/schemas/pointGeoJSON'
      - $ref: '#/components/schemas/multipointGeoJSON'
      - $ref: '#/components/schemas/linestringGeoJSON'
      - $ref: '#/components/schemas/multilinestringGeoJSON'
      - $ref: '#/components/schemas/polygonGeoJSON'
      - $ref: '#/components/schemas/multipolygonGeoJSON'
    timeStamp:
      type: string
      description: This property indicates the time and date when the response was
        generated.
      format: date-time
      example: 2017-08-17T08:05:32Z
    landingPage_2:
      required:
      - links
      type: object
      properties:
        title:
          type: string
          example: Buildings in Bonn
        description:
          type: string
          example: Access to data about buildings in the city of Bonn via a Web API
            that conforms to the OGC API Features specification.
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
      example:
      - href: http://data.example.org/?f=json
        rel: self
        type: application/json
        title: this document
      - href: http://data.example.org/?f=html
        rel: alternate
        type: text/html
        title: this document in HTML
      - href: http://data.example.org/api?f=json
        rel: service
        type: application/vnd.oai.openapi+json;version=3.0
        title: the API definition in OpenAPI 3.0 JSON
      - href: http://data.example.org/api?f=html
        rel: service
        type: text/html
        title: the API definition in HTML
      - href: http://data.example.org/conformance?f=json
        rel: conformance
        type: application/json
        title: the list of conformance classes implemented by this API
      - href: http://data.example.org/collections?f=json
        rel: data
        type: application/json
        title: The collections in the dataset in JSON
      - href: http://data.example.org/collections?f=html
        rel: data
        type: text/html
        title: The collections in the dataset in HTML
    tile-set_2:
      required:
      - tileMatrixSetLink
      type: object
      properties:
        tileMatrixSetLink:
          $ref: https://api.swaggerhub.com/domains/UAB-CREAF/ogc-api-tiles/1.0.0#/components/schemas/tileMatrixSetLink-entry
        infoTemplates:
          $ref: https://api.swaggerhub.com/domains/UAB-CREAF/ogc-api-map-tiles/1.0.0#/components/schemas/infoTemplates
    tileMatrixSetLink-entry:
      required:
      - tileMatrixSet
      type: object
      properties:
        tileMatrixSet:
          type: string
          example: WorldMercatorWGS84Quad
        tileMatrixSetURI:
          type: string
          format: uri
          example: http://schemas.opengis.net/tms/1.0/json/examples/WorldMercatorWGS84Quad.json
        #tileMatrixSetLimits: # commented out by @ghobona because of errors detected by ReDoc 
        #  minItems: 1
        #  type: array
        #  items:
        #    $ref: '#/components/schemas/tileMatrixSetLimits-entry'
  responses:
    tile:
      description: A tile of the collection.
      content:
        image/mvt:
          schema:
            type: string
          example: MVT image
        application/geo+json:
          schema:
            $ref: '#/components/schemas/featureCollectionGeoJSON'
    info:
      description: A getFeatureInfo of a tile
      content:
        application/geo+json:
          schema:
            $ref: '#/components/schemas/featureCollectionGeoJSON'
  parameters:
    f-png-jpeg-vector:
      name: f
      in: query
      description: |-
        The format of the response. If no value is provided, the standard http rules apply, i.e., the accept header is used to determine the format.

        Pre-defined values are "mvt" for a Mapbox Vector Tile, "json" for a GeoJSON tiled feature collection and jpeg, png or gif for image based tiles
        The response to other values is determined by the server.
      required: false
      style: form
      explode: false
      schema:
        type: string
        enum:
        - mvt
        - json
      example: json
    f-tile:
      name: fTile
      in: query
      description: "The format of the response. \nPre-defined values are \"mvt\" for\
        \ a Mapbox Vector Tile, \"json\" for a GeoJSON tiled feature collection and\
        \ jpeg, png or gif for image based tiles\nThe response to other values is\
        \ determined by the server."
      required: false
      style: form
      explode: false
      schema:
        type: string
        enum:
        - mvt
        - json
      example: json
