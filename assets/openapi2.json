{
    "components": {
        "parameters": {
            "bbox-crs": {
                "description": "Indicates the EPSG for the given bbox coordinates.",
                "explode": false,
                "in": "query",
                "name": "bbox-crs",
                "required": false,
                "schema": {
                    "default": 4326,
                    "type": "integer"
                },
                "style": "form"
            },
            "f": {
                "description": "The optional f parameter indicates the output format which the server shall provide as part of the response document.  The default format is GeoJSON.",
                "explode": false,
                "in": "query",
                "name": "f",
                "required": false,
                "schema": {
                    "default": "json",
                    "enum": [
                        "json",
                        "html",
                        "jsonld"
                    ],
                    "type": "string"
                },
                "style": "form"
            },
            "lang": {
                "description": "The optional lang parameter instructs the server return a response in a certain language, if supported.  If the language is not among the available values, the Accept-Language header language will be used if it is supported. If the header is missing, the default server language is used. Note that providers may only support a single language (or often no language at all), that can be different from the server language.  Language strings can be written in a complex (e.g. \"fr-CA,fr;q=0.9,en-US;q=0.8,en;q=0.7\"), simple (e.g. \"de\") or locale-like (e.g. \"de-CH\" or \"fr_BE\") fashion.",
                "in": "query",
                "name": "lang",
                "required": false,
                "schema": {
                    "default": "en-US",
                    "enum": [
                        "en-US"
                    ],
                    "type": "string"
                }
            },
            "offset": {
                "description": "The optional offset parameter indicates the index within the result set from which the server shall begin presenting results in the response document.  The first element has an index of 0 (default).",
                "explode": false,
                "in": "query",
                "name": "offset",
                "required": false,
                "schema": {
                    "default": 0,
                    "minimum": 0,
                    "type": "integer"
                },
                "style": "form"
            },
            "properties": {
                "description": "The properties that should be included for each feature. The parameter value is a comma-separated list of property names.",
                "explode": false,
                "in": "query",
                "name": "properties",
                "required": false,
                "schema": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "style": "form"
            },
            "skipGeometry": {
                "description": "This option can be used to skip response geometries for each feature.",
                "explode": false,
                "in": "query",
                "name": "skipGeometry",
                "required": false,
                "schema": {
                    "default": false,
                    "type": "boolean"
                },
                "style": "form"
            },
            "vendorSpecificParameters": {
                "description": "Additional \"free-form\" parameters that are not explicitly defined",
                "in": "query",
                "name": "vendorSpecificParameters",
                "schema": {
                    "additionalProperties": true,
                    "type": "object"
                },
                "style": "form"
            }
        },
        "responses": {
            "200": {
                "description": "successful operation"
            },
            "Queryables": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/queryables"
                        }
                    }
                },
                "description": "successful queryables operation"
            },
            "Tiles": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/tiles"
                        }
                    }
                },
                "description": "Retrieves the tiles description for this collection"
            },
            "default": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/schemas/exception.yaml"
                        }
                    }
                },
                "description": "Unexpected error"
            }
        },
        "schemas": {
            "queryable": {
                "properties": {
                    "description": {
                        "description": "a human-readable narrative describing the queryable",
                        "type": "string"
                    },
                    "language": {
                        "default": [
                            "en"
                        ],
                        "description": "the language used for the title and description",
                        "type": "string"
                    },
                    "queryable": {
                        "description": "the token that may be used in a CQL predicate",
                        "type": "string"
                    },
                    "title": {
                        "description": "a human readable title for the queryable",
                        "type": "string"
                    },
                    "type": {
                        "description": "the data type of the queryable",
                        "type": "string"
                    },
                    "type-ref": {
                        "description": "a reference to the formal definition of the type",
                        "format": "url",
                        "type": "string"
                    }
                },
                "required": [
                    "queryable",
                    "type"
                ],
                "type": "object"
            },
            "queryables": {
                "properties": {
                    "queryables": {
                        "items": {
                            "$ref": "#/components/schemas/queryable"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "queryables"
                ],
                "type": "object"
            },
            "tilematrixsetlink": {
                "properties": {
                    "tileMatrixSet": {
                        "type": "string"
                    },
                    "tileMatrixSetURI": {
                        "type": "string"
                    }
                },
                "required": [
                    "tileMatrixSet"
                ],
                "type": "object"
            },
            "tiles": {
                "properties": {
                    "links": {
                        "items": {
                            "$ref": "https://raw.githubusercontent.com/opengeospatial/ogcapi-tiles/master/openapi/swaggerhub/tiles.yaml#/components/schemas/link"
                        },
                        "type": "array"
                    },
                    "tileMatrixSetLinks": {
                        "items": {
                            "$ref": "#/components/schemas/tilematrixsetlink"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "tileMatrixSetLinks",
                    "links"
                ],
                "type": "object"
            }
        }
    },
    "info": {
        "contact": {
            "email": "you@example.org",
            "name": "pygeoapi Development Team",
            "url": "https://pygeoapi.io"
        },
        "description": "pygeoapi provides an API to geospatial data",
        "license": {
            "name": "CC-BY 4.0 license",
            "url": "https://creativecommons.org/licenses/by/4.0/"
        },
        "termsOfService": "https://creativecommons.org/licenses/by/4.0/",
        "title": "pygeoapi Demo instance - running latest GitHub version",
        "version": "0.14.dev0",
        "x-keywords": [
            "geospatial",
            "data",
            "api"
        ]
    },
    "openapi": "3.0.2",
    "paths": {
        "/": {
            "get": {
                "description": "Landing page",
                "operationId": "getLandingPage",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/f"
                    },
                    {
                        "$ref": "#/components/parameters/lang"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/LandingPage"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Landing page",
                "tags": [
                    "server"
                ]
            }
        },
        "/collections": {
            "get": {
                "description": "Collections",
                "operationId": "getCollections",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/f"
                    },
                    {
                        "$ref": "#/components/parameters/lang"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/LandingPage"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Collections",
                "tags": [
                    "server"
                ]
            }
        },
        "/collections/dutch-metadata": {
            "get": {
                "description": "Sample metadata records from Dutch Nationaal georegister",
                "operationId": "describeDutch-metadataCollection",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/f"
                    },
                    {
                        "$ref": "#/components/parameters/lang"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Collection"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Sample metadata records from Dutch Nationaal georegister metadata",
                "tags": [
                    "dutch-metadata"
                ]
            }
        },
        "/collections/dutch-metadata/items": {
            "get": {
                "description": "Sample metadata records from Dutch Nationaal georegister",
                "operationId": "getDutch-metadataFeatures",
                "parameters": [
                    {
                        "description": "The optional f parameter indicates the output format which the server shall provide as part of the response document.  The default format is GeoJSON.",
                        "explode": false,
                        "in": "query",
                        "name": "f",
                        "required": false,
                        "schema": {
                            "default": "json",
                            "enum": [
                                "json",
                                "html",
                                "jsonld",
                                "csv"
                            ],
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The optional lang parameter instructs the server return a response in a certain language, if supported.  If the language is not among the available values, the Accept-Language header language will be used if it is supported. If the header is missing, the default server language is used. Note that providers may only support a single language (or often no language at all), that can be different from the server language.  Language strings can be written in a complex (e.g. \"fr-CA,fr;q=0.9,en-US;q=0.8,en;q=0.7\"), simple (e.g. \"de\") or locale-like (e.g. \"de-CH\" or \"fr_BE\") fashion.",
                        "in": "query",
                        "name": "lang",
                        "required": false,
                        "schema": {
                            "default": "en-US",
                            "enum": [
                                "en-US"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/bbox"
                    },
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/limit"
                    },
                    {
                        "description": "The properties that should be included for each feature. The parameter value is a comma-separated list of property names.",
                        "explode": false,
                        "in": "query",
                        "name": "properties",
                        "required": false,
                        "schema": {
                            "items": {
                                "enum": [
                                    "recordCreated",
                                    "recordUpdated",
                                    "type",
                                    "title",
                                    "description",
                                    "providers",
                                    "externalIds",
                                    "themes",
                                    "q"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/vendorSpecificParameters"
                    },
                    {
                        "$ref": "#/components/parameters/skipGeometry"
                    },
                    {
                        "$ref": "https://raw.githubusercontent.com/opengeospatial/ogcapi-records/master/core/openapi/parameters/sortby.yaml"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "$ref": "https://raw.githubusercontent.com/opengeospatial/ogcapi-records/master/core/openapi/parameters/q.yaml"
                    },
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/datetime"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "recordCreated",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "recordUpdated",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "type",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "title",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "description",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "providers",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "externalIds",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "themes",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Features"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Sample metadata records from Dutch Nationaal georegister items",
                "tags": [
                    "dutch-metadata"
                ]
            }
        },
        "/collections/dutch-metadata/items/{featureId}": {
            "get": {
                "description": "Sample metadata records from Dutch Nationaal georegister",
                "operationId": "getDutch-metadataFeature",
                "parameters": [
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/featureId"
                    },
                    {
                        "$ref": "#/components/parameters/f"
                    },
                    {
                        "$ref": "#/components/parameters/lang"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Feature"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Sample metadata records from Dutch Nationaal georegister item by id",
                "tags": [
                    "dutch-metadata"
                ]
            }
        },
        "/collections/dutch-metadata/queryables": {
            "get": {
                "description": "Sample metadata records from Dutch Nationaal georegister",
                "operationId": "getDutch-metadataQueryables",
                "parameters": [
                    {
                        "description": "The optional f parameter indicates the output format which the server shall provide as part of the response document.  The default format is GeoJSON.",
                        "explode": false,
                        "in": "query",
                        "name": "f",
                        "required": false,
                        "schema": {
                            "default": "json",
                            "enum": [
                                "json",
                                "html",
                                "jsonld",
                                "csv"
                            ],
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The optional lang parameter instructs the server return a response in a certain language, if supported.  If the language is not among the available values, the Accept-Language header language will be used if it is supported. If the header is missing, the default server language is used. Note that providers may only support a single language (or often no language at all), that can be different from the server language.  Language strings can be written in a complex (e.g. \"fr-CA,fr;q=0.9,en-US;q=0.8,en;q=0.7\"), simple (e.g. \"de\") or locale-like (e.g. \"de-CH\" or \"fr_BE\") fashion.",
                        "in": "query",
                        "name": "lang",
                        "required": false,
                        "schema": {
                            "default": "en-US",
                            "enum": [
                                "en-US"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Queryables"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Sample metadata records from Dutch Nationaal georegister queryables",
                "tags": [
                    "dutch-metadata"
                ]
            }
        },
        "/collections/dutch_castles": {
            "get": {
                "description": "Locations of castles within the Netherlands from Rijksdienst voor het Cultureel Erfgoed (RCE) INSPIRE WFS. Uses GeoServer WFS v2 backend via OGRProvider.",
                "operationId": "describeDutch_castlesCollection",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/f"
                    },
                    {
                        "$ref": "#/components/parameters/lang"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Collection"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Castles within The Netherlands metadata",
                "tags": [
                    "dutch_castles"
                ]
            }
        },
        "/collections/dutch_castles/items": {
            "get": {
                "description": "Locations of castles within the Netherlands from Rijksdienst voor het Cultureel Erfgoed (RCE) INSPIRE WFS. Uses GeoServer WFS v2 backend via OGRProvider.",
                "operationId": "getDutch_castlesFeatures",
                "parameters": [
                    {
                        "description": "The optional f parameter indicates the output format which the server shall provide as part of the response document.  The default format is GeoJSON.",
                        "explode": false,
                        "in": "query",
                        "name": "f",
                        "required": false,
                        "schema": {
                            "default": "json",
                            "enum": [
                                "json",
                                "html",
                                "jsonld",
                                "csv"
                            ],
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The optional lang parameter instructs the server return a response in a certain language, if supported.  If the language is not among the available values, the Accept-Language header language will be used if it is supported. If the header is missing, the default server language is used. Note that providers may only support a single language (or often no language at all), that can be different from the server language.  Language strings can be written in a complex (e.g. \"fr-CA,fr;q=0.9,en-US;q=0.8,en;q=0.7\"), simple (e.g. \"de\") or locale-like (e.g. \"de-CH\" or \"fr_BE\") fashion.",
                        "in": "query",
                        "name": "lang",
                        "required": false,
                        "schema": {
                            "default": "en-US",
                            "enum": [
                                "en-US"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/bbox"
                    },
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/limit"
                    },
                    {
                        "description": "The properties that should be included for each feature. The parameter value is a comma-separated list of property names.",
                        "explode": false,
                        "in": "query",
                        "name": "properties",
                        "required": false,
                        "schema": {
                            "items": {
                                "enum": [
                                    "gml_id",
                                    "gid",
                                    "cchin",
                                    "naam",
                                    "plaats",
                                    "info_link",
                                    "datering",
                                    "rijksmonnr",
                                    "provincie",
                                    "foto_thumb",
                                    "foto_groot",
                                    "bijschrift",
                                    "zichtbaar",
                                    "legenda",
                                    "typering"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/vendorSpecificParameters"
                    },
                    {
                        "$ref": "#/components/parameters/skipGeometry"
                    },
                    {
                        "$ref": "https://raw.githubusercontent.com/opengeospatial/ogcapi-records/master/core/openapi/parameters/sortby.yaml"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "gml_id",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "gid",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "cchin",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "naam",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "plaats",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "info_link",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "datering",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "rijksmonnr",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "provincie",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "foto_thumb",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "foto_groot",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "bijschrift",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "zichtbaar",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "legenda",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "typering",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Features"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Castles within The Netherlands items",
                "tags": [
                    "dutch_castles"
                ]
            }
        },
        "/collections/dutch_castles/items/{featureId}": {
            "get": {
                "description": "Locations of castles within the Netherlands from Rijksdienst voor het Cultureel Erfgoed (RCE) INSPIRE WFS. Uses GeoServer WFS v2 backend via OGRProvider.",
                "operationId": "getDutch_castlesFeature",
                "parameters": [
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/featureId"
                    },
                    {
                        "$ref": "#/components/parameters/f"
                    },
                    {
                        "$ref": "#/components/parameters/lang"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Feature"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Castles within The Netherlands item by id",
                "tags": [
                    "dutch_castles"
                ]
            }
        },
        "/collections/dutch_castles/queryables": {
            "get": {
                "description": "Locations of castles within the Netherlands from Rijksdienst voor het Cultureel Erfgoed (RCE) INSPIRE WFS. Uses GeoServer WFS v2 backend via OGRProvider.",
                "operationId": "getDutch_castlesQueryables",
                "parameters": [
                    {
                        "description": "The optional f parameter indicates the output format which the server shall provide as part of the response document.  The default format is GeoJSON.",
                        "explode": false,
                        "in": "query",
                        "name": "f",
                        "required": false,
                        "schema": {
                            "default": "json",
                            "enum": [
                                "json",
                                "html",
                                "jsonld",
                                "csv"
                            ],
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The optional lang parameter instructs the server return a response in a certain language, if supported.  If the language is not among the available values, the Accept-Language header language will be used if it is supported. If the header is missing, the default server language is used. Note that providers may only support a single language (or often no language at all), that can be different from the server language.  Language strings can be written in a complex (e.g. \"fr-CA,fr;q=0.9,en-US;q=0.8,en;q=0.7\"), simple (e.g. \"de\") or locale-like (e.g. \"de-CH\" or \"fr_BE\") fashion.",
                        "in": "query",
                        "name": "lang",
                        "required": false,
                        "schema": {
                            "default": "en-US",
                            "enum": [
                                "en-US"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Queryables"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Castles within The Netherlands queryables",
                "tags": [
                    "dutch_castles"
                ]
            }
        },
        "/collections/dutch_georef_stations": {
            "get": {
                "description": "Locations of RD/GNSS-reference stations from Dutch Kadaster PDOK a.k.a RDInfo. Uses MapServer WFS v2 backend via OGRProvider.",
                "operationId": "describeDutch_georef_stationsCollection",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/f"
                    },
                    {
                        "$ref": "#/components/parameters/lang"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Collection"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Dutch Georef Stations via OGR WFS metadata",
                "tags": [
                    "dutch_georef_stations"
                ]
            }
        },
        "/collections/dutch_georef_stations/items": {
            "get": {
                "description": "Locations of RD/GNSS-reference stations from Dutch Kadaster PDOK a.k.a RDInfo. Uses MapServer WFS v2 backend via OGRProvider.",
                "operationId": "getDutch_georef_stationsFeatures",
                "parameters": [
                    {
                        "description": "The optional f parameter indicates the output format which the server shall provide as part of the response document.  The default format is GeoJSON.",
                        "explode": false,
                        "in": "query",
                        "name": "f",
                        "required": false,
                        "schema": {
                            "default": "json",
                            "enum": [
                                "json",
                                "html",
                                "jsonld",
                                "csv"
                            ],
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The optional lang parameter instructs the server return a response in a certain language, if supported.  If the language is not among the available values, the Accept-Language header language will be used if it is supported. If the header is missing, the default server language is used. Note that providers may only support a single language (or often no language at all), that can be different from the server language.  Language strings can be written in a complex (e.g. \"fr-CA,fr;q=0.9,en-US;q=0.8,en;q=0.7\"), simple (e.g. \"de\") or locale-like (e.g. \"de-CH\" or \"fr_BE\") fashion.",
                        "in": "query",
                        "name": "lang",
                        "required": false,
                        "schema": {
                            "default": "en-US",
                            "enum": [
                                "en-US"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/bbox"
                    },
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/limit"
                    },
                    {
                        "description": "The properties that should be included for each feature. The parameter value is a comma-separated list of property names.",
                        "explode": false,
                        "in": "query",
                        "name": "properties",
                        "required": false,
                        "schema": {
                            "items": {
                                "enum": [],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/vendorSpecificParameters"
                    },
                    {
                        "$ref": "#/components/parameters/skipGeometry"
                    },
                    {
                        "$ref": "https://raw.githubusercontent.com/opengeospatial/ogcapi-records/master/core/openapi/parameters/sortby.yaml"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Features"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Dutch Georef Stations via OGR WFS items",
                "tags": [
                    "dutch_georef_stations"
                ]
            }
        },
        "/collections/dutch_georef_stations/items/{featureId}": {
            "get": {
                "description": "Locations of RD/GNSS-reference stations from Dutch Kadaster PDOK a.k.a RDInfo. Uses MapServer WFS v2 backend via OGRProvider.",
                "operationId": "getDutch_georef_stationsFeature",
                "parameters": [
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/featureId"
                    },
                    {
                        "$ref": "#/components/parameters/f"
                    },
                    {
                        "$ref": "#/components/parameters/lang"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Feature"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Dutch Georef Stations via OGR WFS item by id",
                "tags": [
                    "dutch_georef_stations"
                ]
            }
        },
        "/collections/dutch_windmills": {
            "get": {
                "description": "Locations of windmills within the Netherlands from Rijksdienst voor het Cultureel Erfgoed (RCE) INSPIRE WFS. Uses GeoServer WFS v2 backend via OGRProvider.",
                "operationId": "describeDutch_windmillsCollection",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/f"
                    },
                    {
                        "$ref": "#/components/parameters/lang"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Collection"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Windmills within The Netherlands metadata",
                "tags": [
                    "dutch_windmills"
                ]
            }
        },
        "/collections/dutch_windmills/items": {
            "get": {
                "description": "Locations of windmills within the Netherlands from Rijksdienst voor het Cultureel Erfgoed (RCE) INSPIRE WFS. Uses GeoServer WFS v2 backend via OGRProvider.",
                "operationId": "getDutch_windmillsFeatures",
                "parameters": [
                    {
                        "description": "The optional f parameter indicates the output format which the server shall provide as part of the response document.  The default format is GeoJSON.",
                        "explode": false,
                        "in": "query",
                        "name": "f",
                        "required": false,
                        "schema": {
                            "default": "json",
                            "enum": [
                                "json",
                                "html",
                                "jsonld",
                                "csv"
                            ],
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The optional lang parameter instructs the server return a response in a certain language, if supported.  If the language is not among the available values, the Accept-Language header language will be used if it is supported. If the header is missing, the default server language is used. Note that providers may only support a single language (or often no language at all), that can be different from the server language.  Language strings can be written in a complex (e.g. \"fr-CA,fr;q=0.9,en-US;q=0.8,en;q=0.7\"), simple (e.g. \"de\") or locale-like (e.g. \"de-CH\" or \"fr_BE\") fashion.",
                        "in": "query",
                        "name": "lang",
                        "required": false,
                        "schema": {
                            "default": "en-US",
                            "enum": [
                                "en-US"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/bbox"
                    },
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/limit"
                    },
                    {
                        "description": "The properties that should be included for each feature. The parameter value is a comma-separated list of property names.",
                        "explode": false,
                        "in": "query",
                        "name": "properties",
                        "required": false,
                        "schema": {
                            "items": {
                                "enum": [
                                    "gml_id",
                                    "gid",
                                    "NAAM",
                                    "PLAATS",
                                    "CATEGORIE",
                                    "FUNCTIE",
                                    "TYPE",
                                    "STAAT",
                                    "RMONNUMMER",
                                    "TBGCNUMMER",
                                    "INFOLINK",
                                    "THUMBNAIL",
                                    "HFDFUNCTIE",
                                    "FOTOGRAAF",
                                    "FOTO_GROOT",
                                    "BOUWJAAR"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/vendorSpecificParameters"
                    },
                    {
                        "$ref": "#/components/parameters/skipGeometry"
                    },
                    {
                        "$ref": "https://raw.githubusercontent.com/opengeospatial/ogcapi-records/master/core/openapi/parameters/sortby.yaml"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "gml_id",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "gid",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "NAAM",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "PLAATS",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "CATEGORIE",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "FUNCTIE",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "TYPE",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "STAAT",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "RMONNUMMER",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "TBGCNUMMER",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "INFOLINK",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "THUMBNAIL",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "HFDFUNCTIE",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "FOTOGRAAF",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "FOTO_GROOT",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "BOUWJAAR",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Features"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Windmills within The Netherlands items",
                "tags": [
                    "dutch_windmills"
                ]
            }
        },
        "/collections/dutch_windmills/items/{featureId}": {
            "get": {
                "description": "Locations of windmills within the Netherlands from Rijksdienst voor het Cultureel Erfgoed (RCE) INSPIRE WFS. Uses GeoServer WFS v2 backend via OGRProvider.",
                "operationId": "getDutch_windmillsFeature",
                "parameters": [
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/featureId"
                    },
                    {
                        "$ref": "#/components/parameters/f"
                    },
                    {
                        "$ref": "#/components/parameters/lang"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Feature"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Windmills within The Netherlands item by id",
                "tags": [
                    "dutch_windmills"
                ]
            }
        },
        "/collections/dutch_windmills/queryables": {
            "get": {
                "description": "Locations of windmills within the Netherlands from Rijksdienst voor het Cultureel Erfgoed (RCE) INSPIRE WFS. Uses GeoServer WFS v2 backend via OGRProvider.",
                "operationId": "getDutch_windmillsQueryables",
                "parameters": [
                    {
                        "description": "The optional f parameter indicates the output format which the server shall provide as part of the response document.  The default format is GeoJSON.",
                        "explode": false,
                        "in": "query",
                        "name": "f",
                        "required": false,
                        "schema": {
                            "default": "json",
                            "enum": [
                                "json",
                                "html",
                                "jsonld",
                                "csv"
                            ],
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The optional lang parameter instructs the server return a response in a certain language, if supported.  If the language is not among the available values, the Accept-Language header language will be used if it is supported. If the header is missing, the default server language is used. Note that providers may only support a single language (or often no language at all), that can be different from the server language.  Language strings can be written in a complex (e.g. \"fr-CA,fr;q=0.9,en-US;q=0.8,en;q=0.7\"), simple (e.g. \"de\") or locale-like (e.g. \"de-CH\" or \"fr_BE\") fashion.",
                        "in": "query",
                        "name": "lang",
                        "required": false,
                        "schema": {
                            "default": "en-US",
                            "enum": [
                                "en-US"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Queryables"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Windmills within The Netherlands queryables",
                "tags": [
                    "dutch_windmills"
                ]
            }
        },
        "/collections/gdps-temperature": {
            "get": {
                "description": "Global Deterministic Prediction System sample",
                "operationId": "describeGdps-temperatureCollection",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/f"
                    },
                    {
                        "$ref": "#/components/parameters/lang"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Collection"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Global Deterministic Prediction System sample metadata",
                "tags": [
                    "gdps-temperature"
                ]
            }
        },
        "/collections/gdps-temperature/coverage": {
            "get": {
                "description": "Global Deterministic Prediction System sample",
                "operationId": "getGdps-temperatureCoverage",
                "parameters": [
                    {
                        "description": "The optional f parameter indicates the output format which the server shall provide as part of the response document.  The default format is GeoJSON.",
                        "explode": false,
                        "in": "query",
                        "name": "f",
                        "required": false,
                        "schema": {
                            "default": "json",
                            "enum": [
                                "json",
                                "html",
                                "jsonld",
                                "csv"
                            ],
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The optional lang parameter instructs the server return a response in a certain language, if supported.  If the language is not among the available values, the Accept-Language header language will be used if it is supported. If the header is missing, the default server language is used. Note that providers may only support a single language (or often no language at all), that can be different from the server language.  Language strings can be written in a complex (e.g. \"fr-CA,fr;q=0.9,en-US;q=0.8,en;q=0.7\"), simple (e.g. \"de\") or locale-like (e.g. \"de-CH\" or \"fr_BE\") fashion.",
                        "in": "query",
                        "name": "lang",
                        "required": false,
                        "schema": {
                            "default": "en-US",
                            "enum": [
                                "en-US"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/bbox"
                    },
                    {
                        "$ref": "#/components/parameters/bbox-crs"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Features"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Global Deterministic Prediction System sample coverage",
                "tags": [
                    "gdps-temperature"
                ]
            }
        },
        "/collections/gdps-temperature/coverage/domainset": {
            "get": {
                "description": "Global Deterministic Prediction System sample",
                "operationId": "getGdps-temperatureCoverageDomainSet",
                "parameters": [
                    {
                        "description": "The optional f parameter indicates the output format which the server shall provide as part of the response document.  The default format is GeoJSON.",
                        "explode": false,
                        "in": "query",
                        "name": "f",
                        "required": false,
                        "schema": {
                            "default": "json",
                            "enum": [
                                "json",
                                "html",
                                "jsonld",
                                "csv"
                            ],
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The optional lang parameter instructs the server return a response in a certain language, if supported.  If the language is not among the available values, the Accept-Language header language will be used if it is supported. If the header is missing, the default server language is used. Note that providers may only support a single language (or often no language at all), that can be different from the server language.  Language strings can be written in a complex (e.g. \"fr-CA,fr;q=0.9,en-US;q=0.8,en;q=0.7\"), simple (e.g. \"de\") or locale-like (e.g. \"de-CH\" or \"fr_BE\") fashion.",
                        "in": "query",
                        "name": "lang",
                        "required": false,
                        "schema": {
                            "default": "en-US",
                            "enum": [
                                "en-US"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://raw.githubusercontent.com/tomkralidis/ogcapi-coverages-1/fix-cis/yaml-unresolved/schemas/cis_1.1/domainSet.yaml"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Global Deterministic Prediction System sample coverage domain set",
                "tags": [
                    "gdps-temperature"
                ]
            }
        },
        "/collections/gdps-temperature/coverage/rangetype": {
            "get": {
                "description": "Global Deterministic Prediction System sample",
                "operationId": "getGdps-temperatureCoverageRangeType",
                "parameters": [
                    {
                        "description": "The optional f parameter indicates the output format which the server shall provide as part of the response document.  The default format is GeoJSON.",
                        "explode": false,
                        "in": "query",
                        "name": "f",
                        "required": false,
                        "schema": {
                            "default": "json",
                            "enum": [
                                "json",
                                "html",
                                "jsonld",
                                "csv"
                            ],
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The optional lang parameter instructs the server return a response in a certain language, if supported.  If the language is not among the available values, the Accept-Language header language will be used if it is supported. If the header is missing, the default server language is used. Note that providers may only support a single language (or often no language at all), that can be different from the server language.  Language strings can be written in a complex (e.g. \"fr-CA,fr;q=0.9,en-US;q=0.8,en;q=0.7\"), simple (e.g. \"de\") or locale-like (e.g. \"de-CH\" or \"fr_BE\") fashion.",
                        "in": "query",
                        "name": "lang",
                        "required": false,
                        "schema": {
                            "default": "en-US",
                            "enum": [
                                "en-US"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://raw.githubusercontent.com/tomkralidis/ogcapi-coverages-1/fix-cis/yaml-unresolved/schemas/cis_1.1/rangeType.yaml"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Global Deterministic Prediction System sample coverage range type",
                "tags": [
                    "gdps-temperature"
                ]
            }
        },
        "/collections/icoads-sst": {
            "get": {
                "description": "International Comprehensive Ocean-Atmosphere Data Set (ICOADS)",
                "operationId": "describeIcoads-sstCollection",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/f"
                    },
                    {
                        "$ref": "#/components/parameters/lang"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Collection"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get International Comprehensive Ocean-Atmosphere Data Set (ICOADS) metadata",
                "tags": [
                    "icoads-sst"
                ]
            }
        },
        "/collections/icoads-sst/position": {
            "get": {
                "description": "International Comprehensive Ocean-Atmosphere Data Set (ICOADS)",
                "operationId": "queryPositionIcoads-sst",
                "parameters": [
                    {
                        "$ref": "https://schemas.opengis.net/ogcapi/edr/1.0/openapi/parameters/positionCoords.yaml"
                    },
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/datetime"
                    },
                    {
                        "$ref": "https://schemas.opengis.net/ogcapi/edr/1.0/openapi/parameters/parameter-name.yaml"
                    },
                    {
                        "$ref": "https://schemas.opengis.net/ogcapi/edr/1.0/openapi/parameters/z.yaml"
                    },
                    {
                        "$ref": "#/components/parameters/f"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/prs.coverage+json": {
                                "schema": {
                                    "$ref": "https://schemas.opengis.net/ogcapi/edr/1.0/openapi/schemas/coverageJSON.yaml"
                                }
                            }
                        },
                        "description": "Response"
                    }
                },
                "summary": "query International Comprehensive Ocean-Atmosphere Data Set (ICOADS) by position",
                "tags": [
                    "icoads-sst"
                ]
            }
        },
        "/collections/lakes": {
            "get": {
                "description": "lakes of the world, public domain",
                "operationId": "describeLakesCollection",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/f"
                    },
                    {
                        "$ref": "#/components/parameters/lang"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Collection"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Large Lakes metadata",
                "tags": [
                    "lakes"
                ]
            }
        },
        "/collections/lakes/items": {
            "get": {
                "description": "lakes of the world, public domain",
                "operationId": "getLakesFeatures",
                "parameters": [
                    {
                        "description": "The optional f parameter indicates the output format which the server shall provide as part of the response document.  The default format is GeoJSON.",
                        "explode": false,
                        "in": "query",
                        "name": "f",
                        "required": false,
                        "schema": {
                            "default": "json",
                            "enum": [
                                "json",
                                "html",
                                "jsonld",
                                "csv"
                            ],
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The optional lang parameter instructs the server return a response in a certain language, if supported.  If the language is not among the available values, the Accept-Language header language will be used if it is supported. If the header is missing, the default server language is used. Note that providers may only support a single language (or often no language at all), that can be different from the server language.  Language strings can be written in a complex (e.g. \"fr-CA,fr;q=0.9,en-US;q=0.8,en;q=0.7\"), simple (e.g. \"de\") or locale-like (e.g. \"de-CH\" or \"fr_BE\") fashion.",
                        "in": "query",
                        "name": "lang",
                        "required": false,
                        "schema": {
                            "default": "en-US",
                            "enum": [
                                "en-US"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/bbox"
                    },
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/limit"
                    },
                    {
                        "description": "The properties that should be included for each feature. The parameter value is a comma-separated list of property names.",
                        "explode": false,
                        "in": "query",
                        "name": "properties",
                        "required": false,
                        "schema": {
                            "items": {
                                "enum": [
                                    "id",
                                    "scalerank",
                                    "name",
                                    "name_alt",
                                    "admin",
                                    "featureclass"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/vendorSpecificParameters"
                    },
                    {
                        "$ref": "#/components/parameters/skipGeometry"
                    },
                    {
                        "$ref": "https://raw.githubusercontent.com/opengeospatial/ogcapi-records/master/core/openapi/parameters/sortby.yaml"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "id",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "scalerank",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "name_alt",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "admin",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "featureclass",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Features"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Large Lakes items",
                "tags": [
                    "lakes"
                ]
            }
        },
        "/collections/lakes/items/{featureId}": {
            "get": {
                "description": "lakes of the world, public domain",
                "operationId": "getLakesFeature",
                "parameters": [
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/featureId"
                    },
                    {
                        "$ref": "#/components/parameters/f"
                    },
                    {
                        "$ref": "#/components/parameters/lang"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Feature"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Large Lakes item by id",
                "tags": [
                    "lakes"
                ]
            }
        },
        "/collections/lakes/queryables": {
            "get": {
                "description": "lakes of the world, public domain",
                "operationId": "getLakesQueryables",
                "parameters": [
                    {
                        "description": "The optional f parameter indicates the output format which the server shall provide as part of the response document.  The default format is GeoJSON.",
                        "explode": false,
                        "in": "query",
                        "name": "f",
                        "required": false,
                        "schema": {
                            "default": "json",
                            "enum": [
                                "json",
                                "html",
                                "jsonld",
                                "csv"
                            ],
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The optional lang parameter instructs the server return a response in a certain language, if supported.  If the language is not among the available values, the Accept-Language header language will be used if it is supported. If the header is missing, the default server language is used. Note that providers may only support a single language (or often no language at all), that can be different from the server language.  Language strings can be written in a complex (e.g. \"fr-CA,fr;q=0.9,en-US;q=0.8,en;q=0.7\"), simple (e.g. \"de\") or locale-like (e.g. \"de-CH\" or \"fr_BE\") fashion.",
                        "in": "query",
                        "name": "lang",
                        "required": false,
                        "schema": {
                            "default": "en-US",
                            "enum": [
                                "en-US"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Queryables"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Large Lakes queryables",
                "tags": [
                    "lakes"
                ]
            }
        },
        "/collections/lakes/tiles": {
            "get": {
                "description": "lakes of the world, public domain",
                "operationId": "describeLakesTiles",
                "parameters": [
                    {
                        "description": "The optional f parameter indicates the output format which the server shall provide as part of the response document.  The default format is GeoJSON.",
                        "explode": false,
                        "in": "query",
                        "name": "f",
                        "required": false,
                        "schema": {
                            "default": "json",
                            "enum": [
                                "json",
                                "html",
                                "jsonld",
                                "csv"
                            ],
                            "type": "string"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Tiles"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Fetch a Large Lakes tiles description",
                "tags": [
                    "lakes"
                ]
            }
        },
        "/collections/lakes/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}": {
            "get": {
                "description": "lakes of the world, public domain",
                "operationId": "getLakesTiles",
                "parameters": [
                    {
                        "$ref": "https://raw.githubusercontent.com/opengeospatial/ogcapi-tiles/master/openapi/swaggerHubUnresolved/ogc-api-tiles.yaml#/components/parameters/tileMatrixSetId"
                    },
                    {
                        "$ref": "https://raw.githubusercontent.com/opengeospatial/ogcapi-tiles/master/openapi/swaggerHubUnresolved/ogc-api-tiles.yaml#/components/parameters/tileMatrix"
                    },
                    {
                        "$ref": "https://raw.githubusercontent.com/opengeospatial/ogcapi-tiles/master/openapi/swaggerHubUnresolved/ogc-api-tiles.yaml#/components/parameters/tileRow"
                    },
                    {
                        "$ref": "https://raw.githubusercontent.com/opengeospatial/ogcapi-tiles/master/openapi/swaggerHubUnresolved/ogc-api-tiles.yaml#/components/parameters/tileCol"
                    },
                    {
                        "description": "The optional f parameter indicates the output format which the server shall provide as part of the response document.",
                        "explode": false,
                        "in": "query",
                        "name": "f",
                        "required": false,
                        "schema": {
                            "default": "pbf",
                            "enum": [
                                "pbf"
                            ],
                            "type": "string"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/vnd.mapbox-vector-tile": {
                                "schema": {
                                    "format": "binary",
                                    "type": "string"
                                }
                            }
                        },
                        "description": "successful operation"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get a Large Lakes tile",
                "tags": [
                    "lakes"
                ]
            }
        },
        "/collections/obs": {
            "get": {
                "description": "Observations",
                "operationId": "describeObsCollection",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/f"
                    },
                    {
                        "$ref": "#/components/parameters/lang"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Collection"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Observations metadata",
                "tags": [
                    "obs"
                ]
            }
        },
        "/collections/obs/items": {
            "get": {
                "description": "Observations",
                "operationId": "getObsFeatures",
                "parameters": [
                    {
                        "description": "The optional f parameter indicates the output format which the server shall provide as part of the response document.  The default format is GeoJSON.",
                        "explode": false,
                        "in": "query",
                        "name": "f",
                        "required": false,
                        "schema": {
                            "default": "json",
                            "enum": [
                                "json",
                                "html",
                                "jsonld",
                                "csv"
                            ],
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The optional lang parameter instructs the server return a response in a certain language, if supported.  If the language is not among the available values, the Accept-Language header language will be used if it is supported. If the header is missing, the default server language is used. Note that providers may only support a single language (or often no language at all), that can be different from the server language.  Language strings can be written in a complex (e.g. \"fr-CA,fr;q=0.9,en-US;q=0.8,en;q=0.7\"), simple (e.g. \"de\") or locale-like (e.g. \"de-CH\" or \"fr_BE\") fashion.",
                        "in": "query",
                        "name": "lang",
                        "required": false,
                        "schema": {
                            "default": "en-US",
                            "enum": [
                                "en-US"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/bbox"
                    },
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/limit"
                    },
                    {
                        "description": "The properties that should be included for each feature. The parameter value is a comma-separated list of property names.",
                        "explode": false,
                        "in": "query",
                        "name": "properties",
                        "required": false,
                        "schema": {
                            "items": {
                                "enum": [
                                    "id",
                                    "stn_id",
                                    "datetime",
                                    "value",
                                    "lat",
                                    "long"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/vendorSpecificParameters"
                    },
                    {
                        "$ref": "#/components/parameters/skipGeometry"
                    },
                    {
                        "$ref": "https://raw.githubusercontent.com/opengeospatial/ogcapi-records/master/core/openapi/parameters/sortby.yaml"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "id",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "stn_id",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "datetime",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "value",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "lat",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "long",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Features"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Observations items",
                "tags": [
                    "obs"
                ]
            }
        },
        "/collections/obs/items/{featureId}": {
            "get": {
                "description": "Observations",
                "operationId": "getObsFeature",
                "parameters": [
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/featureId"
                    },
                    {
                        "$ref": "#/components/parameters/f"
                    },
                    {
                        "$ref": "#/components/parameters/lang"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Feature"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Observations item by id",
                "tags": [
                    "obs"
                ]
            }
        },
        "/collections/obs/queryables": {
            "get": {
                "description": "Observations",
                "operationId": "getObsQueryables",
                "parameters": [
                    {
                        "description": "The optional f parameter indicates the output format which the server shall provide as part of the response document.  The default format is GeoJSON.",
                        "explode": false,
                        "in": "query",
                        "name": "f",
                        "required": false,
                        "schema": {
                            "default": "json",
                            "enum": [
                                "json",
                                "html",
                                "jsonld",
                                "csv"
                            ],
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The optional lang parameter instructs the server return a response in a certain language, if supported.  If the language is not among the available values, the Accept-Language header language will be used if it is supported. If the header is missing, the default server language is used. Note that providers may only support a single language (or often no language at all), that can be different from the server language.  Language strings can be written in a complex (e.g. \"fr-CA,fr;q=0.9,en-US;q=0.8,en;q=0.7\"), simple (e.g. \"de\") or locale-like (e.g. \"de-CH\" or \"fr_BE\") fashion.",
                        "in": "query",
                        "name": "lang",
                        "required": false,
                        "schema": {
                            "default": "en-US",
                            "enum": [
                                "en-US"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Queryables"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Observations queryables",
                "tags": [
                    "obs"
                ]
            }
        },
        "/collections/ogr_addresses_gpkg": {
            "get": {
                "description": "Dutch addresses subset.",
                "operationId": "describeOgr_addresses_gpkgCollection",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/f"
                    },
                    {
                        "$ref": "#/components/parameters/lang"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Collection"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Dutch addresses (subset Otterlo). OGR GeoPackage Driver metadata",
                "tags": [
                    "ogr_addresses_gpkg"
                ]
            }
        },
        "/collections/ogr_addresses_gpkg/items": {
            "get": {
                "description": "Dutch addresses subset.",
                "operationId": "getOgr_addresses_gpkgFeatures",
                "parameters": [
                    {
                        "description": "The optional f parameter indicates the output format which the server shall provide as part of the response document.  The default format is GeoJSON.",
                        "explode": false,
                        "in": "query",
                        "name": "f",
                        "required": false,
                        "schema": {
                            "default": "json",
                            "enum": [
                                "json",
                                "html",
                                "jsonld",
                                "csv"
                            ],
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The optional lang parameter instructs the server return a response in a certain language, if supported.  If the language is not among the available values, the Accept-Language header language will be used if it is supported. If the header is missing, the default server language is used. Note that providers may only support a single language (or often no language at all), that can be different from the server language.  Language strings can be written in a complex (e.g. \"fr-CA,fr;q=0.9,en-US;q=0.8,en;q=0.7\"), simple (e.g. \"de\") or locale-like (e.g. \"de-CH\" or \"fr_BE\") fashion.",
                        "in": "query",
                        "name": "lang",
                        "required": false,
                        "schema": {
                            "default": "en-US",
                            "enum": [
                                "en-US"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/bbox"
                    },
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/limit"
                    },
                    {
                        "description": "The properties that should be included for each feature. The parameter value is a comma-separated list of property names.",
                        "explode": false,
                        "in": "query",
                        "name": "properties",
                        "required": false,
                        "schema": {
                            "items": {
                                "enum": [
                                    "id",
                                    "straatnaam",
                                    "huisnummer",
                                    "huisletter",
                                    "woonplaats",
                                    "postcode",
                                    "toevoeging"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/vendorSpecificParameters"
                    },
                    {
                        "$ref": "#/components/parameters/skipGeometry"
                    },
                    {
                        "$ref": "https://raw.githubusercontent.com/opengeospatial/ogcapi-records/master/core/openapi/parameters/sortby.yaml"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "id",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "straatnaam",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "huisnummer",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "huisletter",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "woonplaats",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "postcode",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "toevoeging",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Features"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Dutch addresses (subset Otterlo). OGR GeoPackage Driver items",
                "tags": [
                    "ogr_addresses_gpkg"
                ]
            }
        },
        "/collections/ogr_addresses_gpkg/items/{featureId}": {
            "get": {
                "description": "Dutch addresses subset.",
                "operationId": "getOgr_addresses_gpkgFeature",
                "parameters": [
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/featureId"
                    },
                    {
                        "$ref": "#/components/parameters/f"
                    },
                    {
                        "$ref": "#/components/parameters/lang"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Feature"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Dutch addresses (subset Otterlo). OGR GeoPackage Driver item by id",
                "tags": [
                    "ogr_addresses_gpkg"
                ]
            }
        },
        "/collections/ogr_addresses_gpkg/queryables": {
            "get": {
                "description": "Dutch addresses subset.",
                "operationId": "getOgr_addresses_gpkgQueryables",
                "parameters": [
                    {
                        "description": "The optional f parameter indicates the output format which the server shall provide as part of the response document.  The default format is GeoJSON.",
                        "explode": false,
                        "in": "query",
                        "name": "f",
                        "required": false,
                        "schema": {
                            "default": "json",
                            "enum": [
                                "json",
                                "html",
                                "jsonld",
                                "csv"
                            ],
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The optional lang parameter instructs the server return a response in a certain language, if supported.  If the language is not among the available values, the Accept-Language header language will be used if it is supported. If the header is missing, the default server language is used. Note that providers may only support a single language (or often no language at all), that can be different from the server language.  Language strings can be written in a complex (e.g. \"fr-CA,fr;q=0.9,en-US;q=0.8,en;q=0.7\"), simple (e.g. \"de\") or locale-like (e.g. \"de-CH\" or \"fr_BE\") fashion.",
                        "in": "query",
                        "name": "lang",
                        "required": false,
                        "schema": {
                            "default": "en-US",
                            "enum": [
                                "en-US"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Queryables"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Dutch addresses (subset Otterlo). OGR GeoPackage Driver queryables",
                "tags": [
                    "ogr_addresses_gpkg"
                ]
            }
        },
        "/collections/ogr_addresses_sqlite": {
            "get": {
                "description": "Dutch addresses subset.",
                "operationId": "describeOgr_addresses_sqliteCollection",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/f"
                    },
                    {
                        "$ref": "#/components/parameters/lang"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Collection"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Dutch addresses (subset Otterlo). OGR SQLite Driver metadata",
                "tags": [
                    "ogr_addresses_sqlite"
                ]
            }
        },
        "/collections/ogr_addresses_sqlite/items": {
            "get": {
                "description": "Dutch addresses subset.",
                "operationId": "getOgr_addresses_sqliteFeatures",
                "parameters": [
                    {
                        "description": "The optional f parameter indicates the output format which the server shall provide as part of the response document.  The default format is GeoJSON.",
                        "explode": false,
                        "in": "query",
                        "name": "f",
                        "required": false,
                        "schema": {
                            "default": "json",
                            "enum": [
                                "json",
                                "html",
                                "jsonld",
                                "csv"
                            ],
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The optional lang parameter instructs the server return a response in a certain language, if supported.  If the language is not among the available values, the Accept-Language header language will be used if it is supported. If the header is missing, the default server language is used. Note that providers may only support a single language (or often no language at all), that can be different from the server language.  Language strings can be written in a complex (e.g. \"fr-CA,fr;q=0.9,en-US;q=0.8,en;q=0.7\"), simple (e.g. \"de\") or locale-like (e.g. \"de-CH\" or \"fr_BE\") fashion.",
                        "in": "query",
                        "name": "lang",
                        "required": false,
                        "schema": {
                            "default": "en-US",
                            "enum": [
                                "en-US"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/bbox"
                    },
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/limit"
                    },
                    {
                        "description": "The properties that should be included for each feature. The parameter value is a comma-separated list of property names.",
                        "explode": false,
                        "in": "query",
                        "name": "properties",
                        "required": false,
                        "schema": {
                            "items": {
                                "enum": [
                                    "id",
                                    "straatnaam",
                                    "huisnummer",
                                    "huisletter",
                                    "woonplaats",
                                    "postcode",
                                    "toevoeging"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/vendorSpecificParameters"
                    },
                    {
                        "$ref": "#/components/parameters/skipGeometry"
                    },
                    {
                        "$ref": "https://raw.githubusercontent.com/opengeospatial/ogcapi-records/master/core/openapi/parameters/sortby.yaml"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "id",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "straatnaam",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "huisnummer",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "huisletter",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "woonplaats",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "postcode",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "toevoeging",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Features"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Dutch addresses (subset Otterlo). OGR SQLite Driver items",
                "tags": [
                    "ogr_addresses_sqlite"
                ]
            }
        },
        "/collections/ogr_addresses_sqlite/items/{featureId}": {
            "get": {
                "description": "Dutch addresses subset.",
                "operationId": "getOgr_addresses_sqliteFeature",
                "parameters": [
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/featureId"
                    },
                    {
                        "$ref": "#/components/parameters/f"
                    },
                    {
                        "$ref": "#/components/parameters/lang"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Feature"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Dutch addresses (subset Otterlo). OGR SQLite Driver item by id",
                "tags": [
                    "ogr_addresses_sqlite"
                ]
            }
        },
        "/collections/ogr_addresses_sqlite/queryables": {
            "get": {
                "description": "Dutch addresses subset.",
                "operationId": "getOgr_addresses_sqliteQueryables",
                "parameters": [
                    {
                        "description": "The optional f parameter indicates the output format which the server shall provide as part of the response document.  The default format is GeoJSON.",
                        "explode": false,
                        "in": "query",
                        "name": "f",
                        "required": false,
                        "schema": {
                            "default": "json",
                            "enum": [
                                "json",
                                "html",
                                "jsonld",
                                "csv"
                            ],
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The optional lang parameter instructs the server return a response in a certain language, if supported.  If the language is not among the available values, the Accept-Language header language will be used if it is supported. If the header is missing, the default server language is used. Note that providers may only support a single language (or often no language at all), that can be different from the server language.  Language strings can be written in a complex (e.g. \"fr-CA,fr;q=0.9,en-US;q=0.8,en;q=0.7\"), simple (e.g. \"de\") or locale-like (e.g. \"de-CH\" or \"fr_BE\") fashion.",
                        "in": "query",
                        "name": "lang",
                        "required": false,
                        "schema": {
                            "default": "en-US",
                            "enum": [
                                "en-US"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Queryables"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Dutch addresses (subset Otterlo). OGR SQLite Driver queryables",
                "tags": [
                    "ogr_addresses_sqlite"
                ]
            }
        },
        "/collections/ogr_geojson_lakes": {
            "get": {
                "description": "lakes of the world, public domain",
                "operationId": "describeOgr_geojson_lakesCollection",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/f"
                    },
                    {
                        "$ref": "#/components/parameters/lang"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Collection"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Large Lakes OGR GeoJSON Driver metadata",
                "tags": [
                    "ogr_geojson_lakes"
                ]
            }
        },
        "/collections/ogr_geojson_lakes/items": {
            "get": {
                "description": "lakes of the world, public domain",
                "operationId": "getOgr_geojson_lakesFeatures",
                "parameters": [
                    {
                        "description": "The optional f parameter indicates the output format which the server shall provide as part of the response document.  The default format is GeoJSON.",
                        "explode": false,
                        "in": "query",
                        "name": "f",
                        "required": false,
                        "schema": {
                            "default": "json",
                            "enum": [
                                "json",
                                "html",
                                "jsonld",
                                "csv"
                            ],
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The optional lang parameter instructs the server return a response in a certain language, if supported.  If the language is not among the available values, the Accept-Language header language will be used if it is supported. If the header is missing, the default server language is used. Note that providers may only support a single language (or often no language at all), that can be different from the server language.  Language strings can be written in a complex (e.g. \"fr-CA,fr;q=0.9,en-US;q=0.8,en;q=0.7\"), simple (e.g. \"de\") or locale-like (e.g. \"de-CH\" or \"fr_BE\") fashion.",
                        "in": "query",
                        "name": "lang",
                        "required": false,
                        "schema": {
                            "default": "en-US",
                            "enum": [
                                "en-US"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/bbox"
                    },
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/limit"
                    },
                    {
                        "description": "The properties that should be included for each feature. The parameter value is a comma-separated list of property names.",
                        "explode": false,
                        "in": "query",
                        "name": "properties",
                        "required": false,
                        "schema": {
                            "items": {
                                "enum": [
                                    "id",
                                    "scalerank",
                                    "name",
                                    "name_alt",
                                    "admin",
                                    "featureclass"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/vendorSpecificParameters"
                    },
                    {
                        "$ref": "#/components/parameters/skipGeometry"
                    },
                    {
                        "$ref": "https://raw.githubusercontent.com/opengeospatial/ogcapi-records/master/core/openapi/parameters/sortby.yaml"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "id",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "scalerank",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "name_alt",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "admin",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "featureclass",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Features"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Large Lakes OGR GeoJSON Driver items",
                "tags": [
                    "ogr_geojson_lakes"
                ]
            }
        },
        "/collections/ogr_geojson_lakes/items/{featureId}": {
            "get": {
                "description": "lakes of the world, public domain",
                "operationId": "getOgr_geojson_lakesFeature",
                "parameters": [
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/featureId"
                    },
                    {
                        "$ref": "#/components/parameters/f"
                    },
                    {
                        "$ref": "#/components/parameters/lang"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Feature"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Large Lakes OGR GeoJSON Driver item by id",
                "tags": [
                    "ogr_geojson_lakes"
                ]
            }
        },
        "/collections/ogr_geojson_lakes/queryables": {
            "get": {
                "description": "lakes of the world, public domain",
                "operationId": "getOgr_geojson_lakesQueryables",
                "parameters": [
                    {
                        "description": "The optional f parameter indicates the output format which the server shall provide as part of the response document.  The default format is GeoJSON.",
                        "explode": false,
                        "in": "query",
                        "name": "f",
                        "required": false,
                        "schema": {
                            "default": "json",
                            "enum": [
                                "json",
                                "html",
                                "jsonld",
                                "csv"
                            ],
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The optional lang parameter instructs the server return a response in a certain language, if supported.  If the language is not among the available values, the Accept-Language header language will be used if it is supported. If the header is missing, the default server language is used. Note that providers may only support a single language (or often no language at all), that can be different from the server language.  Language strings can be written in a complex (e.g. \"fr-CA,fr;q=0.9,en-US;q=0.8,en;q=0.7\"), simple (e.g. \"de\") or locale-like (e.g. \"de-CH\" or \"fr_BE\") fashion.",
                        "in": "query",
                        "name": "lang",
                        "required": false,
                        "schema": {
                            "default": "en-US",
                            "enum": [
                                "en-US"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Queryables"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Large Lakes OGR GeoJSON Driver queryables",
                "tags": [
                    "ogr_geojson_lakes"
                ]
            }
        },
        "/collections/ogr_gpkg_poi": {
            "get": {
                "description": "Portuguese Points of Interest obtained from OpenStreetMap. Dataset includes Madeira and Azores islands. Uses GeoPackage backend via OGR provider.",
                "operationId": "describeOgr_gpkg_poiCollection",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/f"
                    },
                    {
                        "$ref": "#/components/parameters/lang"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Collection"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Portuguese Points of Interest via OGR GPKG metadata",
                "tags": [
                    "ogr_gpkg_poi"
                ]
            }
        },
        "/collections/ogr_gpkg_poi/items": {
            "get": {
                "description": "Portuguese Points of Interest obtained from OpenStreetMap. Dataset includes Madeira and Azores islands. Uses GeoPackage backend via OGR provider.",
                "operationId": "getOgr_gpkg_poiFeatures",
                "parameters": [
                    {
                        "description": "The optional f parameter indicates the output format which the server shall provide as part of the response document.  The default format is GeoJSON.",
                        "explode": false,
                        "in": "query",
                        "name": "f",
                        "required": false,
                        "schema": {
                            "default": "json",
                            "enum": [
                                "json",
                                "html",
                                "jsonld",
                                "csv"
                            ],
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The optional lang parameter instructs the server return a response in a certain language, if supported.  If the language is not among the available values, the Accept-Language header language will be used if it is supported. If the header is missing, the default server language is used. Note that providers may only support a single language (or often no language at all), that can be different from the server language.  Language strings can be written in a complex (e.g. \"fr-CA,fr;q=0.9,en-US;q=0.8,en;q=0.7\"), simple (e.g. \"de\") or locale-like (e.g. \"de-CH\" or \"fr_BE\") fashion.",
                        "in": "query",
                        "name": "lang",
                        "required": false,
                        "schema": {
                            "default": "en-US",
                            "enum": [
                                "en-US"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/bbox"
                    },
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/limit"
                    },
                    {
                        "description": "The properties that should be included for each feature. The parameter value is a comma-separated list of property names.",
                        "explode": false,
                        "in": "query",
                        "name": "properties",
                        "required": false,
                        "schema": {
                            "items": {
                                "enum": [
                                    "gid",
                                    "osm_id",
                                    "fclass",
                                    "name"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/vendorSpecificParameters"
                    },
                    {
                        "$ref": "#/components/parameters/skipGeometry"
                    },
                    {
                        "$ref": "https://raw.githubusercontent.com/opengeospatial/ogcapi-records/master/core/openapi/parameters/sortby.yaml"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "gid",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "osm_id",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "fclass",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Features"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Portuguese Points of Interest via OGR GPKG items",
                "tags": [
                    "ogr_gpkg_poi"
                ]
            }
        },
        "/collections/ogr_gpkg_poi/items/{featureId}": {
            "get": {
                "description": "Portuguese Points of Interest obtained from OpenStreetMap. Dataset includes Madeira and Azores islands. Uses GeoPackage backend via OGR provider.",
                "operationId": "getOgr_gpkg_poiFeature",
                "parameters": [
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/featureId"
                    },
                    {
                        "$ref": "#/components/parameters/f"
                    },
                    {
                        "$ref": "#/components/parameters/lang"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Feature"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Portuguese Points of Interest via OGR GPKG item by id",
                "tags": [
                    "ogr_gpkg_poi"
                ]
            }
        },
        "/collections/ogr_gpkg_poi/queryables": {
            "get": {
                "description": "Portuguese Points of Interest obtained from OpenStreetMap. Dataset includes Madeira and Azores islands. Uses GeoPackage backend via OGR provider.",
                "operationId": "getOgr_gpkg_poiQueryables",
                "parameters": [
                    {
                        "description": "The optional f parameter indicates the output format which the server shall provide as part of the response document.  The default format is GeoJSON.",
                        "explode": false,
                        "in": "query",
                        "name": "f",
                        "required": false,
                        "schema": {
                            "default": "json",
                            "enum": [
                                "json",
                                "html",
                                "jsonld",
                                "csv"
                            ],
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The optional lang parameter instructs the server return a response in a certain language, if supported.  If the language is not among the available values, the Accept-Language header language will be used if it is supported. If the header is missing, the default server language is used. Note that providers may only support a single language (or often no language at all), that can be different from the server language.  Language strings can be written in a complex (e.g. \"fr-CA,fr;q=0.9,en-US;q=0.8,en;q=0.7\"), simple (e.g. \"de\") or locale-like (e.g. \"de-CH\" or \"fr_BE\") fashion.",
                        "in": "query",
                        "name": "lang",
                        "required": false,
                        "schema": {
                            "default": "en-US",
                            "enum": [
                                "en-US"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Queryables"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Portuguese Points of Interest via OGR GPKG queryables",
                "tags": [
                    "ogr_gpkg_poi"
                ]
            }
        },
        "/collections/ogr_gpkg_wales_railway_lines": {
            "get": {
                "description": "Railway lines in Wales (UK) from Ordnance Survey. Uses GeoPackage backend via OGR provider.",
                "operationId": "describeOgr_gpkg_wales_railway_linesCollection",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/f"
                    },
                    {
                        "$ref": "#/components/parameters/lang"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Collection"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Railway lines in Wales (UK) via OGR GPKG metadata",
                "tags": [
                    "ogr_gpkg_wales_railway_lines"
                ]
            }
        },
        "/collections/ogr_gpkg_wales_railway_lines/items": {
            "get": {
                "description": "Railway lines in Wales (UK) from Ordnance Survey. Uses GeoPackage backend via OGR provider.",
                "operationId": "getOgr_gpkg_wales_railway_linesFeatures",
                "parameters": [
                    {
                        "description": "The optional f parameter indicates the output format which the server shall provide as part of the response document.  The default format is GeoJSON.",
                        "explode": false,
                        "in": "query",
                        "name": "f",
                        "required": false,
                        "schema": {
                            "default": "json",
                            "enum": [
                                "json",
                                "html",
                                "jsonld",
                                "csv"
                            ],
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The optional lang parameter instructs the server return a response in a certain language, if supported.  If the language is not among the available values, the Accept-Language header language will be used if it is supported. If the header is missing, the default server language is used. Note that providers may only support a single language (or often no language at all), that can be different from the server language.  Language strings can be written in a complex (e.g. \"fr-CA,fr;q=0.9,en-US;q=0.8,en;q=0.7\"), simple (e.g. \"de\") or locale-like (e.g. \"de-CH\" or \"fr_BE\") fashion.",
                        "in": "query",
                        "name": "lang",
                        "required": false,
                        "schema": {
                            "default": "en-US",
                            "enum": [
                                "en-US"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/bbox"
                    },
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/limit"
                    },
                    {
                        "description": "The properties that should be included for each feature. The parameter value is a comma-separated list of property names.",
                        "explode": false,
                        "in": "query",
                        "name": "properties",
                        "required": false,
                        "schema": {
                            "items": {
                                "enum": [
                                    "id",
                                    "type"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/vendorSpecificParameters"
                    },
                    {
                        "$ref": "#/components/parameters/skipGeometry"
                    },
                    {
                        "$ref": "https://raw.githubusercontent.com/opengeospatial/ogcapi-records/master/core/openapi/parameters/sortby.yaml"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "id",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "type",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Features"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Railway lines in Wales (UK) via OGR GPKG items",
                "tags": [
                    "ogr_gpkg_wales_railway_lines"
                ]
            }
        },
        "/collections/ogr_gpkg_wales_railway_lines/items/{featureId}": {
            "get": {
                "description": "Railway lines in Wales (UK) from Ordnance Survey. Uses GeoPackage backend via OGR provider.",
                "operationId": "getOgr_gpkg_wales_railway_linesFeature",
                "parameters": [
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/featureId"
                    },
                    {
                        "$ref": "#/components/parameters/f"
                    },
                    {
                        "$ref": "#/components/parameters/lang"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Feature"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Railway lines in Wales (UK) via OGR GPKG item by id",
                "tags": [
                    "ogr_gpkg_wales_railway_lines"
                ]
            }
        },
        "/collections/ogr_gpkg_wales_railway_lines/queryables": {
            "get": {
                "description": "Railway lines in Wales (UK) from Ordnance Survey. Uses GeoPackage backend via OGR provider.",
                "operationId": "getOgr_gpkg_wales_railway_linesQueryables",
                "parameters": [
                    {
                        "description": "The optional f parameter indicates the output format which the server shall provide as part of the response document.  The default format is GeoJSON.",
                        "explode": false,
                        "in": "query",
                        "name": "f",
                        "required": false,
                        "schema": {
                            "default": "json",
                            "enum": [
                                "json",
                                "html",
                                "jsonld",
                                "csv"
                            ],
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The optional lang parameter instructs the server return a response in a certain language, if supported.  If the language is not among the available values, the Accept-Language header language will be used if it is supported. If the header is missing, the default server language is used. Note that providers may only support a single language (or often no language at all), that can be different from the server language.  Language strings can be written in a complex (e.g. \"fr-CA,fr;q=0.9,en-US;q=0.8,en;q=0.7\"), simple (e.g. \"de\") or locale-like (e.g. \"de-CH\" or \"fr_BE\") fashion.",
                        "in": "query",
                        "name": "lang",
                        "required": false,
                        "schema": {
                            "default": "en-US",
                            "enum": [
                                "en-US"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Queryables"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Railway lines in Wales (UK) via OGR GPKG queryables",
                "tags": [
                    "ogr_gpkg_wales_railway_lines"
                ]
            }
        },
        "/collections/ogr_gpkg_wales_stations": {
            "get": {
                "description": "Railway stations in Wales (UK) from Ordnance Survey. Uses GeoPackage backend via OGR provider.",
                "operationId": "describeOgr_gpkg_wales_stationsCollection",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/f"
                    },
                    {
                        "$ref": "#/components/parameters/lang"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Collection"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Railway stations in Wales (UK) via OGR GPKG metadata",
                "tags": [
                    "ogr_gpkg_wales_stations"
                ]
            }
        },
        "/collections/ogr_gpkg_wales_stations/items": {
            "get": {
                "description": "Railway stations in Wales (UK) from Ordnance Survey. Uses GeoPackage backend via OGR provider.",
                "operationId": "getOgr_gpkg_wales_stationsFeatures",
                "parameters": [
                    {
                        "description": "The optional f parameter indicates the output format which the server shall provide as part of the response document.  The default format is GeoJSON.",
                        "explode": false,
                        "in": "query",
                        "name": "f",
                        "required": false,
                        "schema": {
                            "default": "json",
                            "enum": [
                                "json",
                                "html",
                                "jsonld",
                                "csv"
                            ],
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The optional lang parameter instructs the server return a response in a certain language, if supported.  If the language is not among the available values, the Accept-Language header language will be used if it is supported. If the header is missing, the default server language is used. Note that providers may only support a single language (or often no language at all), that can be different from the server language.  Language strings can be written in a complex (e.g. \"fr-CA,fr;q=0.9,en-US;q=0.8,en;q=0.7\"), simple (e.g. \"de\") or locale-like (e.g. \"de-CH\" or \"fr_BE\") fashion.",
                        "in": "query",
                        "name": "lang",
                        "required": false,
                        "schema": {
                            "default": "en-US",
                            "enum": [
                                "en-US"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/bbox"
                    },
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/limit"
                    },
                    {
                        "description": "The properties that should be included for each feature. The parameter value is a comma-separated list of property names.",
                        "explode": false,
                        "in": "query",
                        "name": "properties",
                        "required": false,
                        "schema": {
                            "items": {
                                "enum": [
                                    "id",
                                    "type",
                                    "name"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/vendorSpecificParameters"
                    },
                    {
                        "$ref": "#/components/parameters/skipGeometry"
                    },
                    {
                        "$ref": "https://raw.githubusercontent.com/opengeospatial/ogcapi-records/master/core/openapi/parameters/sortby.yaml"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "id",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "type",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Features"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Railway stations in Wales (UK) via OGR GPKG items",
                "tags": [
                    "ogr_gpkg_wales_stations"
                ]
            }
        },
        "/collections/ogr_gpkg_wales_stations/items/{featureId}": {
            "get": {
                "description": "Railway stations in Wales (UK) from Ordnance Survey. Uses GeoPackage backend via OGR provider.",
                "operationId": "getOgr_gpkg_wales_stationsFeature",
                "parameters": [
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/featureId"
                    },
                    {
                        "$ref": "#/components/parameters/f"
                    },
                    {
                        "$ref": "#/components/parameters/lang"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Feature"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Railway stations in Wales (UK) via OGR GPKG item by id",
                "tags": [
                    "ogr_gpkg_wales_stations"
                ]
            }
        },
        "/collections/ogr_gpkg_wales_stations/queryables": {
            "get": {
                "description": "Railway stations in Wales (UK) from Ordnance Survey. Uses GeoPackage backend via OGR provider.",
                "operationId": "getOgr_gpkg_wales_stationsQueryables",
                "parameters": [
                    {
                        "description": "The optional f parameter indicates the output format which the server shall provide as part of the response document.  The default format is GeoJSON.",
                        "explode": false,
                        "in": "query",
                        "name": "f",
                        "required": false,
                        "schema": {
                            "default": "json",
                            "enum": [
                                "json",
                                "html",
                                "jsonld",
                                "csv"
                            ],
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The optional lang parameter instructs the server return a response in a certain language, if supported.  If the language is not among the available values, the Accept-Language header language will be used if it is supported. If the header is missing, the default server language is used. Note that providers may only support a single language (or often no language at all), that can be different from the server language.  Language strings can be written in a complex (e.g. \"fr-CA,fr;q=0.9,en-US;q=0.8,en;q=0.7\"), simple (e.g. \"de\") or locale-like (e.g. \"de-CH\" or \"fr_BE\") fashion.",
                        "in": "query",
                        "name": "lang",
                        "required": false,
                        "schema": {
                            "default": "en-US",
                            "enum": [
                                "en-US"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Queryables"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Railway stations in Wales (UK) via OGR GPKG queryables",
                "tags": [
                    "ogr_gpkg_wales_stations"
                ]
            }
        },
        "/collections/unesco_pois_italy": {
            "get": {
                "description": "Unesco Points of Interest in Italy. Using GeoSolutions GeoServer WFS demo-server as backend WFS.",
                "operationId": "describeUnesco_pois_italyCollection",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/f"
                    },
                    {
                        "$ref": "#/components/parameters/lang"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Collection"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Unesco POIs in Italy via OGR WFS metadata",
                "tags": [
                    "unesco_pois_italy"
                ]
            }
        },
        "/collections/unesco_pois_italy/items": {
            "get": {
                "description": "Unesco Points of Interest in Italy. Using GeoSolutions GeoServer WFS demo-server as backend WFS.",
                "operationId": "getUnesco_pois_italyFeatures",
                "parameters": [
                    {
                        "description": "The optional f parameter indicates the output format which the server shall provide as part of the response document.  The default format is GeoJSON.",
                        "explode": false,
                        "in": "query",
                        "name": "f",
                        "required": false,
                        "schema": {
                            "default": "json",
                            "enum": [
                                "json",
                                "html",
                                "jsonld",
                                "csv"
                            ],
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The optional lang parameter instructs the server return a response in a certain language, if supported.  If the language is not among the available values, the Accept-Language header language will be used if it is supported. If the header is missing, the default server language is used. Note that providers may only support a single language (or often no language at all), that can be different from the server language.  Language strings can be written in a complex (e.g. \"fr-CA,fr;q=0.9,en-US;q=0.8,en;q=0.7\"), simple (e.g. \"de\") or locale-like (e.g. \"de-CH\" or \"fr_BE\") fashion.",
                        "in": "query",
                        "name": "lang",
                        "required": false,
                        "schema": {
                            "default": "en-US",
                            "enum": [
                                "en-US"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/bbox"
                    },
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/limit"
                    },
                    {
                        "description": "The properties that should be included for each feature. The parameter value is a comma-separated list of property names.",
                        "explode": false,
                        "in": "query",
                        "name": "properties",
                        "required": false,
                        "schema": {
                            "items": {
                                "enum": [
                                    "gml_id",
                                    "cod_unesco",
                                    "sito",
                                    "seriale",
                                    "cod_compon",
                                    "componente",
                                    "tipo_area"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/vendorSpecificParameters"
                    },
                    {
                        "$ref": "#/components/parameters/skipGeometry"
                    },
                    {
                        "$ref": "https://raw.githubusercontent.com/opengeospatial/ogcapi-records/master/core/openapi/parameters/sortby.yaml"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "gml_id",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "cod_unesco",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "sito",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "seriale",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "cod_compon",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "componente",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "tipo_area",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Features"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Unesco POIs in Italy via OGR WFS items",
                "tags": [
                    "unesco_pois_italy"
                ]
            }
        },
        "/collections/unesco_pois_italy/items/{featureId}": {
            "get": {
                "description": "Unesco Points of Interest in Italy. Using GeoSolutions GeoServer WFS demo-server as backend WFS.",
                "operationId": "getUnesco_pois_italyFeature",
                "parameters": [
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/featureId"
                    },
                    {
                        "$ref": "#/components/parameters/f"
                    },
                    {
                        "$ref": "#/components/parameters/lang"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Feature"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Unesco POIs in Italy via OGR WFS item by id",
                "tags": [
                    "unesco_pois_italy"
                ]
            }
        },
        "/collections/unesco_pois_italy/queryables": {
            "get": {
                "description": "Unesco Points of Interest in Italy. Using GeoSolutions GeoServer WFS demo-server as backend WFS.",
                "operationId": "getUnesco_pois_italyQueryables",
                "parameters": [
                    {
                        "description": "The optional f parameter indicates the output format which the server shall provide as part of the response document.  The default format is GeoJSON.",
                        "explode": false,
                        "in": "query",
                        "name": "f",
                        "required": false,
                        "schema": {
                            "default": "json",
                            "enum": [
                                "json",
                                "html",
                                "jsonld",
                                "csv"
                            ],
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The optional lang parameter instructs the server return a response in a certain language, if supported.  If the language is not among the available values, the Accept-Language header language will be used if it is supported. If the header is missing, the default server language is used. Note that providers may only support a single language (or often no language at all), that can be different from the server language.  Language strings can be written in a complex (e.g. \"fr-CA,fr;q=0.9,en-US;q=0.8,en;q=0.7\"), simple (e.g. \"de\") or locale-like (e.g. \"de-CH\" or \"fr_BE\") fashion.",
                        "in": "query",
                        "name": "lang",
                        "required": false,
                        "schema": {
                            "default": "en-US",
                            "enum": [
                                "en-US"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Queryables"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Unesco POIs in Italy via OGR WFS queryables",
                "tags": [
                    "unesco_pois_italy"
                ]
            }
        },
        "/collections/utah_city_locations": {
            "get": {
                "description": "Data from the state of Utah. Standard demo dataset from the deegree WFS server that is used as backend WFS.",
                "operationId": "describeUtah_city_locationsCollection",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/f"
                    },
                    {
                        "$ref": "#/components/parameters/lang"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Collection"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Cities in Utah via OGR WFS metadata",
                "tags": [
                    "utah_city_locations"
                ]
            }
        },
        "/collections/utah_city_locations/items": {
            "get": {
                "description": "Data from the state of Utah. Standard demo dataset from the deegree WFS server that is used as backend WFS.",
                "operationId": "getUtah_city_locationsFeatures",
                "parameters": [
                    {
                        "description": "The optional f parameter indicates the output format which the server shall provide as part of the response document.  The default format is GeoJSON.",
                        "explode": false,
                        "in": "query",
                        "name": "f",
                        "required": false,
                        "schema": {
                            "default": "json",
                            "enum": [
                                "json",
                                "html",
                                "jsonld",
                                "csv"
                            ],
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The optional lang parameter instructs the server return a response in a certain language, if supported.  If the language is not among the available values, the Accept-Language header language will be used if it is supported. If the header is missing, the default server language is used. Note that providers may only support a single language (or often no language at all), that can be different from the server language.  Language strings can be written in a complex (e.g. \"fr-CA,fr;q=0.9,en-US;q=0.8,en;q=0.7\"), simple (e.g. \"de\") or locale-like (e.g. \"de-CH\" or \"fr_BE\") fashion.",
                        "in": "query",
                        "name": "lang",
                        "required": false,
                        "schema": {
                            "default": "en-US",
                            "enum": [
                                "en-US"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/bbox"
                    },
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/limit"
                    },
                    {
                        "description": "The properties that should be included for each feature. The parameter value is a comma-separated list of property names.",
                        "explode": false,
                        "in": "query",
                        "name": "properties",
                        "required": false,
                        "schema": {
                            "items": {
                                "enum": [
                                    "gml_id",
                                    "NAME",
                                    "CO_SEAT",
                                    "POP_1999",
                                    "POP_SYM_99",
                                    "POP_2000",
                                    "POP_SYM_00",
                                    "STATE"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/vendorSpecificParameters"
                    },
                    {
                        "$ref": "#/components/parameters/skipGeometry"
                    },
                    {
                        "$ref": "https://raw.githubusercontent.com/opengeospatial/ogcapi-records/master/core/openapi/parameters/sortby.yaml"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "gml_id",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "NAME",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "CO_SEAT",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "POP_1999",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "POP_SYM_99",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "POP_2000",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "POP_SYM_00",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "explode": false,
                        "in": "query",
                        "name": "STATE",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Features"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Cities in Utah via OGR WFS items",
                "tags": [
                    "utah_city_locations"
                ]
            }
        },
        "/collections/utah_city_locations/items/{featureId}": {
            "get": {
                "description": "Data from the state of Utah. Standard demo dataset from the deegree WFS server that is used as backend WFS.",
                "operationId": "getUtah_city_locationsFeature",
                "parameters": [
                    {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/featureId"
                    },
                    {
                        "$ref": "#/components/parameters/f"
                    },
                    {
                        "$ref": "#/components/parameters/lang"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Feature"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Cities in Utah via OGR WFS item by id",
                "tags": [
                    "utah_city_locations"
                ]
            }
        },
        "/collections/utah_city_locations/queryables": {
            "get": {
                "description": "Data from the state of Utah. Standard demo dataset from the deegree WFS server that is used as backend WFS.",
                "operationId": "getUtah_city_locationsQueryables",
                "parameters": [
                    {
                        "description": "The optional f parameter indicates the output format which the server shall provide as part of the response document.  The default format is GeoJSON.",
                        "explode": false,
                        "in": "query",
                        "name": "f",
                        "required": false,
                        "schema": {
                            "default": "json",
                            "enum": [
                                "json",
                                "html",
                                "jsonld",
                                "csv"
                            ],
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The optional lang parameter instructs the server return a response in a certain language, if supported.  If the language is not among the available values, the Accept-Language header language will be used if it is supported. If the header is missing, the default server language is used. Note that providers may only support a single language (or often no language at all), that can be different from the server language.  Language strings can be written in a complex (e.g. \"fr-CA,fr;q=0.9,en-US;q=0.8,en;q=0.7\"), simple (e.g. \"de\") or locale-like (e.g. \"de-CH\" or \"fr_BE\") fashion.",
                        "in": "query",
                        "name": "lang",
                        "required": false,
                        "schema": {
                            "default": "en-US",
                            "enum": [
                                "en-US"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Queryables"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "404": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "Get Cities in Utah via OGR WFS queryables",
                "tags": [
                    "utah_city_locations"
                ]
            }
        },
        "/conformance": {
            "get": {
                "description": "API conformance definition",
                "operationId": "getConformanceDeclaration",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/f"
                    },
                    {
                        "$ref": "#/components/parameters/lang"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/LandingPage"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "500": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError"
                    }
                },
                "summary": "API conformance definition",
                "tags": [
                    "server"
                ]
            }
        },
        "/openapi": {
            "get": {
                "description": "This document",
                "operationId": "getOpenapi",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/f"
                    },
                    {
                        "$ref": "#/components/parameters/lang"
                    },
                    {
                        "description": "UI to render the OpenAPI document",
                        "explode": false,
                        "in": "query",
                        "name": "ui",
                        "required": false,
                        "schema": {
                            "default": "swagger",
                            "enum": [
                                "swagger",
                                "redoc"
                            ],
                            "type": "string"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200"
                    },
                    "400": {
                        "$ref": "https://demo.pygeoapi.io/master/schemas/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter"
                    },
                    "default": {
                        "$ref": "#/components/responses/default"
                    }
                },
                "summary": "This document",
                "tags": [
                    "server"
                ]
            }
        },
        "/processes": {
            "get": {
                "description": "Processes",
                "operationId": "getProcesses",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/f"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/responses/ProcessList.yaml"
                    },
                    "default": {
                        "$ref": "#/components/responses/default"
                    }
                },
                "summary": "Processes",
                "tags": [
                    "server"
                ]
            }
        },
        "/processes/hello-world": {
            "get": {
                "description": "An example process that takes a name as input, and echoes it back as output. Intended to demonstrate a simple process with a single literal input.",
                "operationId": "describeHello-worldProcess",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/f"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200"
                    },
                    "default": {
                        "$ref": "#/components/responses/default"
                    }
                },
                "summary": "Get process metadata",
                "tags": [
                    "hello-world"
                ]
            }
        },
        "/processes/hello-world/execution": {
            "post": {
                "description": "An example process that takes a name as input, and echoes it back as output. Intended to demonstrate a simple process with a single literal input.",
                "operationId": "executeHello-worldJob",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "inputs": {
                                    "message": "An optional message.",
                                    "name": "World"
                                }
                            },
                            "schema": {
                                "$ref": "https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/schemas/execute.yaml"
                            }
                        }
                    },
                    "description": "Mandatory execute request JSON",
                    "required": true
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200"
                    },
                    "201": {
                        "$ref": "https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/responses/ExecuteAsync.yaml"
                    },
                    "404": {
                        "$ref": "https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/responses/NotFound.yaml"
                    },
                    "500": {
                        "$ref": "https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/responses/ServerError.yaml"
                    },
                    "default": {
                        "$ref": "#/components/responses/default"
                    }
                },
                "summary": "Process Hello World execution",
                "tags": [
                    "hello-world"
                ]
            }
        },
        "/processes/pygeometa-metadata-generate": {
            "get": {
                "description": "Generate metadata from a pygeometa metadata control file (MCF)",
                "operationId": "describePygeometa-metadata-generateProcess",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/f"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200"
                    },
                    "default": {
                        "$ref": "#/components/responses/default"
                    }
                },
                "summary": "Get process metadata",
                "tags": [
                    "pygeometa-metadata-generate"
                ]
            }
        },
        "/processes/pygeometa-metadata-generate/execution": {
            "post": {
                "description": "Generate metadata from a pygeometa metadata control file (MCF)",
                "operationId": "executePygeometa-metadata-generateJob",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "inputs": {
                                    "mcf": {
                                        "mcf": {
                                            "version": "1.0"
                                        }
                                    },
                                    "schema": "oarec-record"
                                }
                            },
                            "schema": {
                                "$ref": "https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/schemas/execute.yaml"
                            }
                        }
                    },
                    "description": "Mandatory execute request JSON",
                    "required": true
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200"
                    },
                    "201": {
                        "$ref": "https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/responses/ExecuteAsync.yaml"
                    },
                    "404": {
                        "$ref": "https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/responses/NotFound.yaml"
                    },
                    "500": {
                        "$ref": "https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/responses/ServerError.yaml"
                    },
                    "default": {
                        "$ref": "#/components/responses/default"
                    }
                },
                "summary": "Process pygeometa metadata generation execution",
                "tags": [
                    "pygeometa-metadata-generate"
                ]
            }
        },
        "/processes/pygeometa-metadata-validate": {
            "get": {
                "description": "Validate metadata from a pygeometa metadata control file (MCF)",
                "operationId": "describePygeometa-metadata-validateProcess",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/f"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200"
                    },
                    "default": {
                        "$ref": "#/components/responses/default"
                    }
                },
                "summary": "Get process metadata",
                "tags": [
                    "pygeometa-metadata-validate"
                ]
            }
        },
        "/processes/pygeometa-metadata-validate/execution": {
            "post": {
                "description": "Validate metadata from a pygeometa metadata control file (MCF)",
                "operationId": "executePygeometa-metadata-validateJob",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "inputs": {
                                    "mcf": {
                                        "mcf": {
                                            "version": "1.0"
                                        }
                                    }
                                }
                            },
                            "schema": {
                                "$ref": "https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/schemas/execute.yaml"
                            }
                        }
                    },
                    "description": "Mandatory execute request JSON",
                    "required": true
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200"
                    },
                    "201": {
                        "$ref": "https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/responses/ExecuteAsync.yaml"
                    },
                    "404": {
                        "$ref": "https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/responses/NotFound.yaml"
                    },
                    "500": {
                        "$ref": "https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/responses/ServerError.yaml"
                    },
                    "default": {
                        "$ref": "#/components/responses/default"
                    }
                },
                "summary": "Process pygeometa metadata control file (MCF) validation execution",
                "tags": [
                    "pygeometa-metadata-validate"
                ]
            }
        },
        "/stac": {
            "get": {
                "description": "SpatioTemporal Asset Catalog",
                "operationId": "getStacCatalog",
                "parameters": [],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200"
                    },
                    "default": {
                        "$ref": "#/components/responses/default"
                    }
                },
                "summary": "SpatioTemporal Asset Catalog",
                "tags": [
                    "stac"
                ]
            }
        }
    },
    "servers": [
        {
            "description": "pygeoapi provides an API to geospatial data",
            "url": "https://demo.pygeoapi.io/master"
        }
    ],
    "tags": [
        {
            "description": "pygeoapi provides an API to geospatial data",
            "externalDocs": {
                "description": "information",
                "url": "https://github.com/geopython/pygeoapi"
            },
            "name": "server"
        },
        {
            "description": "SpatioTemporal Asset Catalog",
            "name": "stac"
        },
        {
            "description": "Observations",
            "name": "obs"
        },
        {
            "description": "lakes of the world, public domain",
            "name": "lakes"
        },
        {
            "description": "Locations of windmills within the Netherlands from Rijksdienst voor het Cultureel Erfgoed (RCE) INSPIRE WFS. Uses GeoServer WFS v2 backend via OGRProvider.",
            "name": "dutch_windmills"
        },
        {
            "description": "Locations of castles within the Netherlands from Rijksdienst voor het Cultureel Erfgoed (RCE) INSPIRE WFS. Uses GeoServer WFS v2 backend via OGRProvider.",
            "name": "dutch_castles"
        },
        {
            "description": "Locations of RD/GNSS-reference stations from Dutch Kadaster PDOK a.k.a RDInfo. Uses MapServer WFS v2 backend via OGRProvider.",
            "name": "dutch_georef_stations"
        },
        {
            "description": "Data from the state of Utah. Standard demo dataset from the deegree WFS server that is used as backend WFS.",
            "name": "utah_city_locations"
        },
        {
            "description": "Unesco Points of Interest in Italy. Using GeoSolutions GeoServer WFS demo-server as backend WFS.",
            "name": "unesco_pois_italy"
        },
        {
            "description": "Portuguese Points of Interest obtained from OpenStreetMap. Dataset includes Madeira and Azores islands. Uses GeoPackage backend via OGR provider.",
            "name": "ogr_gpkg_poi"
        },
        {
            "description": "lakes of the world, public domain",
            "name": "ogr_geojson_lakes"
        },
        {
            "description": "Railway lines in Wales (UK) from Ordnance Survey. Uses GeoPackage backend via OGR provider.",
            "name": "ogr_gpkg_wales_railway_lines"
        },
        {
            "description": "Railway stations in Wales (UK) from Ordnance Survey. Uses GeoPackage backend via OGR provider.",
            "name": "ogr_gpkg_wales_stations"
        },
        {
            "description": "Dutch addresses subset.",
            "name": "ogr_addresses_sqlite"
        },
        {
            "description": "Dutch addresses subset.",
            "name": "ogr_addresses_gpkg"
        },
        {
            "description": "Global Deterministic Prediction System sample",
            "name": "gdps-temperature"
        },
        {
            "description": "International Comprehensive Ocean-Atmosphere Data Set (ICOADS)",
            "name": "icoads-sst"
        },
        {
            "description": "Sample metadata records from Dutch Nationaal georegister",
            "name": "dutch-metadata"
        },
        {
            "description": "An example process that takes a name as input, and echoes it back as output. Intended to demonstrate a simple process with a single literal input.",
            "name": "hello-world"
        },
        {
            "description": "Validate metadata from a pygeometa metadata control file (MCF)",
            "name": "pygeometa-metadata-validate"
        },
        {
            "description": "Generate metadata from a pygeometa metadata control file (MCF)",
            "name": "pygeometa-metadata-generate"
        }
    ]
}